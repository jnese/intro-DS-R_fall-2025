{
  "hash": "c42d60463c1ff9e607111b4eaa2fca1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Homework 1\"\nauthor: \"Your Name Here\"\nformat:\n  html:\n    embed-resources: true\nexecute:\n  error: false\n  message: false\n  warning: false\n---\n\n\n### Create a RStudio Project on your machine.\n\n-   Within the Project create a folder for *data* and *scripts*.\n-   Download the following two datasets into the project *data* folder.\n    -   *sesame13.sav*\n    -   *star.csv*\n-   Save your hw1.Rmd file in your *scripts* folder\n\n### Loading Packages\n\nThe code chunk below loads the `{tidyverse}` package. Please also load `{here}`, `{rio}`, and `{janitor}`. If you get errors, you probably don't have one of the packages installed yet, so run `install.packages(\"package_name\")` in the console first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(rio)\nlibrary(janitor)\n```\n:::\n\n\nNote that you should get some messages printed out below that state all the packages that have been loaded. This is important to pay attention to. It says that both `{ggplot2}` and `{dplyr}` have been loaded, so you don't need explicit calls to those packages.\n\n### Read in the data\n\nUse the code chunk below to:\n\n-   Read in *sesame13.sav* using `{here}` and `{rio}`\n-   Read in *star.csv* using `{here}` and `{readr}`\n-   Apply the `clean_names()` function to both\n-   Save each dataset as a separate object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsesame <- import(here(\"data\", \"sesame13.sav\"))\n\nstar <- read_csv(here(\"data\", \"star.csv\"))\n```\n:::\n\n\n### `{ggplot2}` Peek\n\nMany packages also include data. We'll focus here on the **mpg** dataset, which comes from `{ggplot2}`. Run the following code to produce a scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](hw1-key_files/figure-html/first-plot-1.png){width=672}\n:::\n:::\n\n\n### Help documentation\n\nLook at the help documentation for `geom_point()`. Use the help documentation to change the color of the points to \"gray70\". Start getting in the habit of running code within a code chunk rather than in the text/prose areas.\n\nIn the code chunk below create a second scatterplot with the *mpg* dataset, this time with the number of cylinders displayed on the *x*-axis and the city miles per gallon on the *y*-axis. Also change the color of the points to \"gray70\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#?geom_point\n\nggplot(mpg, aes(x = cyl, y = cty)) +\n  geom_point(color = \"gray70\")\n```\n\n::: {.cell-output-display}\n![](hw1-key_files/figure-html/second-plot-1.png){width=672}\n:::\n:::\n\n\n### Inspecting Data\n\nThe *diamonds* dataset is also included with *ggplot2*. The code below will show the first six rows of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n\n\n:::\n:::\n\n\nLook at the help documentation and then use the code below to change the number of rows shown to 15.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(diamonds, 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n11  0.3  Good      J     SI1      64      55   339  4.25  4.28  2.73\n12  0.23 Ideal     J     VS1      62.8    56   340  3.93  3.9   2.46\n13  0.22 Premium   F     SI1      60.4    61   342  3.88  3.84  2.33\n14  0.31 Ideal     J     SI2      62.2    54   344  4.35  4.37  2.71\n15  0.2  Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n```\n\n\n:::\n:::\n\n\nCall a similar function that shows the last six rows of the dataset. (Note you may need to look at the same help documentation.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.72 Premium   D     SI1      62.7    59  2757  5.69  5.73  3.58\n2  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n3  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n4  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n5  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n6  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n```\n\n\n:::\n:::\n\n\nUse any function you want to determine the dimensions of the dataset - i.e., the number of rows and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"<\"Good\"<..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"<\"E\"<\"F\"<\"G\"<..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"<\"SI2\"<\"SI1\"<..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n```\n\n\n:::\n\n```{.r .cell-code}\ndiamonds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 53940\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 53940    10\n```\n\n\n:::\n:::\n\n\nUse the pipe operator, `%>%`, along with the `count()` function, to count the rows of each diamond color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  count(color) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  color     n\n  <ord> <int>\n1 D      6775\n2 E      9797\n3 F      9542\n4 G     11292\n5 H      8304\n6 I      5422\n7 J      2808\n```\n\n\n:::\n:::\n\n\nWrite the same code as above, but this time use `count()` without the pipe operator\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(diamonds, color) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  color     n\n  <ord> <int>\n1 D      6775\n2 E      9797\n3 F      9542\n4 G     11292\n5 H      8304\n6 I      5422\n7 J      2808\n```\n\n\n:::\n:::\n\n\nBe sure to add your name to the top of the document (line 2, in the YAML).\n\nClick the Render button near the top, and turn in both the quarto document and the output (.html file) to Canvas.\n",
    "supporting": [
      "hw1-key_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}