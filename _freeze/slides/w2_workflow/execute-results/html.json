{
  "hash": "5129e090be55bce4da749b8e9e87fcc6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 2: Workflow\"\nsubtitle: \".R & .qmd, Projects, Read Data\"\nauthor: \"Joe Nese\"\ninstitute: \"University of Oregon<br>Fall 2024\"\nformat:\n  revealjs: \n    theme: default\n    highlight-style: github\n    incremental: false\n    fig-width: 9\n    fig-height: 3.5\n    scrollable: true\n    multiplex: true\nexecute: \n  echo: true\n  warning: false\n---\n\n\n\n\n## Housekeeping\n\nLet's give Aden a hex sticker!\n\n![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcUCh4UcLoDZUhQGSuHinhZd0ga1DkZkLD_A&usqp=CAU)\n\n. . .\n\n![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOBdqUT_41pAu_2qJF1Y6-kDC7T_XiY0f_Tw&usqp=CAU)\n\n## Housekeeping\n\n- Slides as pdf\n- Screenshots\n  - Something to show you completed the Codecademy lesson in its entirety\n  - Only responsible for the free Lessons\n    \n![](https://jnese.github.io/intro-DS-R_fall-2024/slides/images/codecademy_complete.png){width=30%}\n\n# Workflow\n\nWeek 2\n\n## Agenda {.smaller}\n\n-   Project Oriented Workflow\n    -   RStudio Projects\n    -   File paths\n    -   Reading in data\n    -   Scripts (.R & .qmd)\n    -   Loading packages\n-   Looking at data\n-   The pipe `%>%`\n    -   also `|>`\n\n**Learning Objectives**\n\n-   Open an RStudio Project\n-   Understand file paths\n-   Learn two ways to read data\n-   Establish good workflow habits\n\n# RStudio Projects\n\n## RStudio Projects (.Rproj)\n\nAn RStudio project - .Rproj - is basically a folder to house all the files for your project\n\n-   scripts\n-   products\n-   data\n-   figures\n\n## RStudio Projects (.Rproj)\n\n**Advantages**\n\n-   Work with several projects at the same time (several projects open)\n    -   these are self-contained!\n-   Can save the history of your commands after quitting\n-   Can specify version control system (e.g., Git)\n-   Previously edited code tabs are restored upon opening\n-   The current **working directory** is set to the project directory\n\n## What's a working directory? {.smaller}\n\nWhere you're at on your computer\n\n-   the folder location\n-   *Quick check-in*: does this make sense?\n\n. . .\n\nYou *can* change your working directory with `setwd(\"path/to/files\")`...\n\n...**BUT** I strongly urge you to avoid that\n\n. . .\n\nInstead, we're going to use RStudio Projects and the `{here}` package\n\n. . .\n\n-   See where you're currently at by looking at the top of the console\n-   Or run `getwd()` in the console\n\n![](./images/directory.png)\n\n## What's different with .Rproj?\n\nYour working directory is immediately wherever your `.Rproj` project is located\n\nThis is true for whoever is accessing the project\n\nUse the `{here}` package to specify **paths**\n\n-   You can read/save data (and figures, products, etc.) which we'll talk about more later\n\n## Best practices {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n`here()`\n\n-   works for anyone who uses the script\n-   share it out with no code editing\n-   easy to work on other projects with different directories\n:::\n\n::: {.column width=\"50%\"}\n**Session \\> Restart R** (`Ctrl/Command + Shift + F10`)\n\nRestart the `R` session\n\n-   Create a fresh `R` process\n-   Deletes **all** objects\n-   Packages will need to be re-loaded\n-   Resets any code-enables options\n-   Ensures script is self-contained\n:::\n:::\n\n## Project Oriented Workflow\n\nWrite every script assuming it will be run in a fresh `R` process\n\n. . .\n\n1)  Do not save `.RData` when you quit `R` and don't load `.RData` when you start `R`\n\nWeek 1: **Tools 🡆 Global Options 🡆 General**\n\nWorkspace\n\n-   \"*Restore .RData into workspace at startup*\" -- **Uncheck**\n-   \"*Save workspace to .RData on exit:*\" -- **Never**\n\n. . .\n\n2)  Daily work habit:\n\n-   Restart `R` very often and re-run your developing script from the top\n-   Use the RStudio menu item: **Session \\> Restart R** (`Ctrl/Command + Shift + F10`)\n\n# Workflow\n\n## Let's start by making a new project\n\nTypical workflow\n\n1.  Make a new .RProj\n\n2.  Add folders\n\n    -   \"data\"\n    -   \"scripts\"\n\n3.  Read in data\n\n4.  Create scripts\n\n5.  Load packages\n\n# RStudio Project\n\n## 1. Make a new .RProj\n\n*File* \\> *New Project...*\n\nor - upper right of RStudio by the `R` cube\n\n⬇️ \\> *New Project...*\n\n## 1. Make a new .RProj\n\nLet's name it: \"my_first_project\"\n\n-   notice the naming convention\n    -   no caps\n    -   no spaces\n    -   no special characters (e.g., `?`, `!`, `\"`, `#`)\n    -   \"`_`\" and \"`-`\" are ok\n\n. . .\n\nChoose a location for it\n\n-   An .RProj will need its own folder, with no other projects in it!\n-   Projects in Dropbox often lead to unexpected occurences\n\n. . .\n\nI'll just save \"my_first_project\" to my desktop\n\n[**demo**]{style=\"color:#D55E00;\"}\n\n# Organize\n\n## 2. Create folders\n\nLet's make two folder in different ways (either is fine)\n\n**data**\n\n-   where we will store all our project-related data\n-   let's create that in Rstudio\n\n**scripts**\n\n-   where we will hold all our scripts (.R or .Rmd or .qmd files)\n-   let's create that in the folder on our machine\n\n[**demo**]{style=\"color:#D55E00;\"}\n\n# Reading Data\n\n## Dowload data\n\nLet's save the following data files into our project \"data\" folder\n\n(*go [here](https://jnese.github.io/intro-DS-R_fall-2024/data_list.html) to download*)\n\n1.  ecls-k_samp.sav\n2.  Fatality.txt\n3.  Project_Reads_Scores.csv\n\n## Let's see files are in our \"data\" folder\n\n- You can `list.files(\"path/to/files\")` to see the contents of your project directory (i.e., what your computer \"sees\")\n  + `list.files(here(\"data\"))`\n- You can also use the *Files* tab in RStudio\n\n. . .\n\n- Use `here()` to access data or any file in your project\n\n. . .\n\n- `here()` is simply a function to print a path\n\n. . .\n\n[**demo**]{style=\"color:#D55E00;\"}\n\n## Reading data into `R`\n\nYou just need two things:\n\n1.  **where** the data is located\n\nThis is most often just a path on you machine\n\n. . .\n\n2. `package::function()` to read the data \n\nWe'll be talking about two data reading packages\n\n- `{rio}`\n- `{readr}`\n\n## We'll use the `{here}` package ![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/here.png){fig-align=\"right\" width=\"10%\"} {.smaller}\n\n`{here}` uses the top-level directory of a project to easily build **paths** to files\n\n-   Allows you to worry about paths a little less\n-   Helps reproducibility\n-   Your final project!\n\nThink of `here()` simply as a function to print a path name\n\nA **path** can be the **location** of your data\n\n::: aside\nArt: [Allison Horst](https://www.allisonhorst.com/)\n:::\n\n. . .\n\n**path** = **location**\n\n## [`{here}`](https://here.r-lib.org/)\n\nThink of `here()` simply as a function to print a path name\n\nFirst, install/load the package\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In the console: \n# install.packages(\"here\")\n# Then, load the package\n\nlibrary(here)\n```\n:::\n\n\n## [`{here}`](https://here.r-lib.org/)\n\nThink of `here()` simply as a function to print a path name\n\nRun this code in your project (console is fine)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/jnese/Desktop/BRT/Teaching/1_Intro-Data-Science/intro-DS-R_fall-2024\"\n```\n\n\n:::\n:::\n\n\n. . .\n\nThis is the \"top level\" directory of **my** project\n\n## [`{here}`](https://here.r-lib.org/)\n\nThink of `here()` simply as a function to print a path\n\nRun this code in your project (console is fine)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/jnese/Desktop/BRT/Teaching/1_Intro-Data-Science/intro-DS-R_fall-2024\"\n```\n\n\n:::\n:::\n\n\n**This is the path to the project directory**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/jnese/Desktop/BRT/Teaching/1_Intro-Data-Science/intro-DS-R_fall-2024/data\"\n```\n\n\n:::\n:::\n\n\nThis is the path to the \"data\" folder in our project directory\n\n## [`{here}`](https://here.r-lib.org/) {.smaller}\n\nThink of `here()` simply as a function to print a path\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/jnese/Desktop/BRT/Teaching/1_Intro-Data-Science/intro-DS-R_fall-2024\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/jnese/Desktop/BRT/Teaching/1_Intro-Data-Science/intro-DS-R_fall-2024/data\"\n```\n\n\n:::\n:::\n\n\n**Question:** What was the difference in the output between these?\n\n. . .\n\n**Question:** What will the following produce?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\", \"ecls-k_samp.sav\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/jnese/Desktop/BRT/Teaching/1_Intro-Data-Science/intro-DS-R_fall-2024/data/ecls-k_samp.sav\"\n```\n\n\n:::\n:::\n\n\n# Reading Data\n\n## `{rio}`\n\n-   `{rio}` is a wrapper around many different packages that import/export data in different formats\n\n-   Great package\n\n-   Most of the time \"it just works\" regardless of the source file type\n\n    -   this might not impress you, but it really should!\n    -   any package that turns a complex task into a simple procedure that \"just works\" is invaluable\n\n## [`rio::`import()`](https://cran.r-project.org/web/packages/rio/vignettes/rio.html) {.smaller}\n\n<p>\n\n[import]{style=\"color:#0072B2\"}([file]{style=\"color:#D55E00\"}, [format]{style=\"color:#CC79A7\"}, [setclass]{style=\"color:#009E73\"}, ...)\n\n[file]{style=\"color:#D55E00\"} = character string naming a file\n\n. . .\n\n[format]{style=\"color:#CC79A7\"} = (*optional*) character string of file format; e.g., `\",\"` for comma-separated values\n\n[setclass]{style=\"color:#009E73\"} = (*optional*) character vector specifying one or more classes to set on the import. Default is `\"data.frame\"`. We would probably prefer `\"tbl_df\"` for a `tibble`\n\n</p>\n\n## 3a. Read in data\n\nTry it!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5|10,11|14,15\"}\nlibrary(rio)\n#library(tidyverse)\n\n# .sav\neclsk <- import(here(\"data\", \"ecls-k_samp.sav\"), setclass = \"tbl_df\")\n\n# Use `as_tibble` instead of `setclass = \"tbl_df\"`\n\n# .txt\nfatality <- import(here(\"data\", \"Fatality.txt\")) %>% \n  as_tibble()\n\n#.csv\nexam1 <- import(here(\"data\", \"Project_Reads_Scores.csv\")) %>% \n  as_tibble()\n```\n:::\n\n\n## You can even read directly from the web 😲\n\nFatality.txt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport(\"https://raw.githubusercontent.com/jnese/intro-DS-R_fall-2024/master/data/Fatality.txt\",\n       setclass = \"tbl_df\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336 × 10\n   state  year mrall beertax  mlda jaild comserd vmiles unrate perinc\n   <int> <int> <dbl>   <dbl> <dbl> <chr> <chr>    <dbl>  <dbl>  <dbl>\n 1     1  1982  2.13   1.54   19   no    no        7.23  14.4  10544.\n 2     1  1983  2.35   1.79   19   no    no        7.84  13.7  10733.\n 3     1  1984  2.34   1.71   19   no    no        8.26  11.1  11109.\n 4     1  1985  2.19   1.65   19.7 no    no        8.73   8.90 11333.\n 5     1  1986  2.67   1.61   21   no    no        8.95   9.80 11662.\n 6     1  1987  2.72   1.56   21   no    no        9.17   7.80 11944 \n 7     1  1988  2.49   1.50   21   no    no        9.67   7.20 12369.\n 8     4  1982  2.50   0.215  19   yes   yes       6.81   9.90 12309.\n 9     4  1983  2.27   0.206  19   yes   yes       6.59   9.10 12694.\n10     4  1984  2.83   0.297  19   yes   yes       6.71   5    13266.\n# ℹ 326 more rows\n```\n\n\n:::\n:::\n\n\n## Write data {.smaller}\n\nSave data just as easily with [`rio::export()`](https://cran.r-project.org/web/packages/rio/vignettes/rio.html)\n\n. . .\n\nYou need two things:\n\n<p>\n\n1.  [What]{style=\"color:#009E73\"} to export?\n2.  [Where]{style=\"color:#D55E00\"} to export?\n\n. . .\n\n[export]{style=\"color:#0072B2\"}([x]{style=\"color:#009E73\"}, [file]{style=\"color:#D55E00\"}, [format]{style=\"color:#CC79A7\"}, ...)\n\n[x]{style=\"color:#009E73\"} = data frame (tibble) to be written into a file\n\n[file]{style=\"color:#D55E00\"} = character string naming a file\n\n</p>\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexport(fatality, here(\"data\", \"exam1.sav\"))\n\nexport(fatality, here(\"data\", \"exam1.txt\"))\n\nexport(fatality, here(\"data\", \"exam1.dta\"))\n```\n:::\n\n\n## `convert()` {.smaller}\n\nAnother really useful feature is `convert()`, which just takes a file of one type and converts it to another\n\nSay your advisor uses SPSS 😐, but their colleague uses Stata 😐, and you use `R` 😎\n\nJust run one line of code!\n\n<p>\n\n. . .\n\n[convert]{style=\"color:#0072B2\"}([in_file]{style=\"color:#009E73\"}, [out_file]{style=\"color:#CC79A7\"}, ...)\n\n. . .\n\n[in_file]{style=\"color:#009E73\"} = character string naming an input file\n\n. . .\n\n[out_file]{style=\"color:#CC79A7\"} = character string naming an output file\n\n. . .\n\n[convert]{style=\"color:#0072B2\"}(here(\"data\", [ecls-k_samp.sav]{style=\"color:#009E73\"}), (here(\"data\", [ecls-k_samp.txt]{style=\"color:#CC79A7\"})))\n\n</p>\n\n## How is this all working? {.smaller}\n\n`{rio}` wraps a variety of faster, more modernized packages than those provided by base `R`\n\n-   `{data.table}` for delimited formats\n-   `{readxl}` and `{openxlsx}` for reading and writing Excel workbooks\n-   `data.table::fread()` for text-delimited files to automatically determine the file format regardless of the extension\n    -   also *very* fast\n\n. . .\n\nAgain, `import()` \"just works\"\n\n## Maintaining data \"labels\" {.smaller}\n\n**Question: How many of you or your colleagues use SPSS or Stata?**\n\n. . .\n\nIn SPSS and Stata numeric data are often encoded with labels\n\nFor SAS, Stata, and SPSS files use `{haven}`\n\n`{haven}` allow you to transform the data into the character/factor version\n\n`{haven}` store metadata from rich file formats (SPSS, Stata, etc.) in variable-level attributes in a consistent form regardless of file type or underlying import function\n\n. . .\n\n-   `rio::characterize()` converts a single variable or all variables in the data that have *label* attributes into character vectors\n-   `rio::factorize()` does the same but returns factor variables\n\n. . .\n\n**This is important for several of your homeworks!**\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\neclsk %>%\n  select(child_id, k_type:sex) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  child_id k_type school_type   sex\n  <chr>     <dbl>       <dbl> <dbl>\n1 0842021C      1           0     0\n2 0905002C      1           1     0\n3 0150012C      1           1     1\n4 0556009C      1           1     1\n5 0089013C      1           0     0\n6 1217001C      0           0     1\n```\n\n\n:::\n:::\n\n\n## \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\neclsk %>%\n  characterize() %>%\n  select(child_id, k_type:sex) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  child_id k_type   school_type sex   \n  <chr>    <chr>    <chr>       <chr> \n1 0842021C full-day public      male  \n2 0905002C full-day private     male  \n3 0150012C full-day private     female\n4 0556009C full-day private     female\n5 0089013C full-day public      male  \n6 1217001C half-day public      female\n```\n\n\n:::\n:::\n\n\n## [`{readr}`](https://readr.tidyverse.org/) {.smaller}\n\n-   Great package; most of the time \"it just works\" regardless of the source file type\n-   Loads with `{tidyverse}`\n-   Default loads data as a `tibble`\n    -   this is nice!\n\n. . .\n\n-   [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html): comma separated (CSV) files\n-   [`read_tsv()`](https://readr.tidyverse.org/reference/read_delim.html): tab separated files\n-   [`read_delim()`](https://readr.tidyverse.org/reference/read_delim.html): general delimited files\n-   [`read_fwf()`](https://readr.tidyverse.org/reference/read_fwf.html): fixed width files\n-   [`read_table()`](https://readr.tidyverse.org/reference/read_table.html): tabular files where columns are separated by white-space\n-   [`read_log()`](https://readr.tidyverse.org/reference/read_log.html): web log files\n\n## [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) {.smaller}\n\nYou just need one thing:\n\n1.  [where]{style=\"color:#D55E00;\"} the data is located\n\n[read_csv]{style=\"color:#0072B2;\"}([file]{style=\"color:#D55E00;\"}, ...)\n\n[file]{style=\"color:#D55E00;\"} = a **path** to a file, a connection, or literal data (either a single string or a raw vector)\n\n. . .\n\n**And how do we get a path string?**\n\n. . .\n\nwith the `here()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(here(\"path\", \"to\", \"data.csv\"))\n```\n:::\n\n\n## 3b. Read in data\n\nTry it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# read_table() for space separated data\nfatality <- read_table(here(\"data\", \"Fatality.txt\")) \n\n#read_csv(), the one I most often use\nexam1 <- read_csv(here(\"data\", \"Project_Reads_Scores.csv\"))\n\n# read directly from the web, in this case a .csv\nweb <- read_csv(\"https://github.com/datalorax/ncme_18/raw/master/data/pubschls.csv\")\n```\n:::\n\n\n## [`write_*()`](https://readr.tidyverse.org/reference/index.html) {.smaller}\n\nSave data just as easily with `write_*()`\n\nYou need two things:\n\n1.  [What]{style=\"color:#009E73;\"} to export?\n2.  [Where]{style=\"color:#D55E00;\"} to export?\n\n. . .\n\n[write_csv]{style=\"color:#0072B2;\"}([x]{style=\"color:#009E73;\"}, [file]{style=\"color:#D55E00;\"}, ...)\n\n[x]{style=\"color:#009E73;\"} = data frame (tibble) to be written into a file\n\n[file]{style=\"color:#D55E00;\"} = character string naming a file to write to\n\n. . .\n\nBasically\n\n`write_*(what, \"where\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(exam1, here(\"data\", \"exam1.csv\"))\n```\n:::\n\n\n# Scripts\n\n## .R {.smaller}\n\n.R is `R` script (code) file\n\n*File* \\> *New File* \\> *R Script*\n\n-   Everything is code\n-   Text - comments! - need to begin with \"`#`\"\n    -   Comments are a **great** habit!\n    -   Use them to document the what & why of your code\n\nRun code\n\n-   `Ctrl/Command + Enter`\n-   Highlight specific code, `Ctrl/Command + Enter`\n-   Put mouse on line, `Ctrl/Command + Enter`, and it will execute the all connected (piped) code\n\n[demo]{style=\"color:#D55E00;\"}\n\n## Quick Peek {.smaller}\n\n**What is Quarto?**\n\n- an open-source scientific and technical publishing system\n- create dynamic content with Python, R, Julia, and Observable.\n- publish reproducible, production quality articles, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, etc.\n- include equations, citations, crossrefs, figure panels, callouts, advanced layout, etc.\n- a multi-language, next generation version of R Markdown (from Posit)\n- includes many built in output formats (and options for customizing each)\n- has native features for special project types like Websites, Books, and Blogs (rather than relying on external packages)\n\n## Why Quarto?\n\n-   **Reproducibility**: reproducible workflow\n    -   Code + output + prose together\n    -   Syntax highlighting FTW!\n    -   Familiar-feeling authoring with the visual editor without having to learn a bunch of new markdown syntax\n-   **Efficiency**: consistent formatting\n-   **Extendability**: Use with Python, and Julia, and Observable, and more\n\n## .qmd\n\n.qmd is a document format file that combines code **AND** prose\n\n-   *File* \\> *New File* \\> *Quarto document...*\n\n. . .\n\nCode goes into **\"code chunks\"**\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\n# comment\n\ndata %>% \n  select(id, read, math)\n```\n````\n:::\n\n\n. . .\n\nProse goes outside the code chunks\n\n. . .\n\n[demo]{style=\"color:#D55E00;\"}\n\n## .R & .qmd\n\n-   Both are great\n-   Serve different purposes\n\n. . .\n\nOrganization tip\n\n-   .qmd with headers\n-   .R with `# Header ----`\n\n[demo]{style=\"color:#D55E00;\"}\n\n# Packages\n\n## Packages {.smaller}\n\n. . .\n\n**First** the package must be *installed* on your machine\n\n`install.packages(“package_name”)`\n\n. . .\n\n-   you will only need to do this the first time you want to use the package\n-   **never** keep this code line (just run it in the console!)\n-   notices the quotes around the package name\n-   **never keep this code line**\n\n. . .\n\nAny time you want to use a package it should be *loaded*\n\n`library(package_name)`\n\n. . .\n\n-   you will do this each time you use the package in your scripts\n-   notices no quotes around the package name\n\n## [`{janitor}`](https://github.com/sfirke/janitor) ![](https://raw.githubusercontent.com/sfirke/janitor/main/man/figures/logo_small.png){fig-align=\"right\" width=\"10%\"} {.smaller}\n\nA fantastic package!\n\n-   `remove_empty_rows()`\n-   `remove_empty_cols()`\n-   `excel_numeric_to_date()`\n    -   changes numeric dates imported from Excel to actual dates\n-   `tabyl()`\n    -   frequency table with *n* and *%*\n\n. . .\n\n-   `clean_names()`\n    -   styles **column names** (NOT data itself) with \"snake_case\": lower case and underscore between words\n    -   can choose other \"`*_case`\"\n\n# Let's put it all together\n\n## New script {.smaller}\n\nLet's work within the \"my_first_project\" .RProj\n\n(1) Open a new Quarto document\n\n[demo]{style=\"color:#D55E00;\"}\n\n## New script {.smaller}\n\nLet's work within the \"my_first_project\" .RProj\n\n(2) Clean it up\n    i) Modify the YAML\n    ii) Save the file as \"practice.qmd\" in the **scripts** folder\n    iii) Render!\n\n[demo]{style=\"color:#D55E00;\"}\n\n## New script {.smaller}\n\n- Opens with a template\n- Going forward with .qmd...\n    1) you can delete everything in the template, **or**\n    2) you can open an empty .qmd document\n    \n**but** do one of these\n\n## Working with data\n\n(1) What packages will we use?\n\n-   `library(here)` - where the data is located\n-   `library(rio)` - read the data into `R`\n-   `library(janitor)` - clean the **variable names** in the data\n-   `library(tidyverse)` - clean the **data**\n\n## Working with data\n\n(2) Read in the [Penguins.csv](https://uo-datasci-specialization.github.io/c1-intro-fall-2022/data_list.html) data\n\n-   Let's name the data \"*penguins*\"\n-   Three options, choose one\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rio::import()\npenguins <- import(here(\"data\", \"Penguins.csv\"), setclass = \"tbl_df\")\n\npenguins <- import(here(\"data\", \"Penguins.csv\"))\n\n# readr::read_csv()\npenguins <- read_csv(here(\"data\", \"Penguins.csv\")) \n```\n:::\n\n\n::: aside\nNote that this data is taken from the `{palmerpenguins}` package but has slight modifications\n:::\n\n## What do our data look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   Species Island    `Bill Length (mm)` `Bill Depth (mm)` `Flipper Length (mm)`\n   <chr>   <chr>                  <dbl>             <dbl>                 <dbl>\n 1 Adelie  Torgersen               39.1              18.7                   181\n 2 Adelie  Torgersen               39.5              17.4                   186\n 3 Adelie  Torgersen               40.3              18                     195\n 4 Adelie  Torgersen               NA                NA                      NA\n 5 Adelie  Torgersen               36.7              19.3                   193\n 6 Adelie  Torgersen               39.3              20.6                   190\n 7 Adelie  Torgersen               38.9              17.8                   181\n 8 Adelie  Torgersen               39.2              19.6                   195\n 9 Adelie  Torgersen               34.1              18.1                   193\n10 Adelie  Torgersen               42                20.2                   190\n# ℹ 334 more rows\n# ℹ 3 more variables: `Body Mass (g)` <dbl>, Sex <chr>, Year <dbl>\n```\n\n\n:::\n:::\n\n\n. . .\n\nOr use `View()` to take a look at the full data in RStudio\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(penguins)\n```\n:::\n\n\nor click on the object name in your RStudio *Environment*\n\n## `janitor::clean_names()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# re-assign the \"reads\" object by reading the data in again\npenguins <- read_csv(here(\"data\", \"Penguins.csv\")) %>% \n  clean_names()\n\n# or just work with the existing \"penguins\" object\npenguins <- penguins %>% \n  clean_names()\n```\n:::\n\n\n<img src=\"https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/janitor_clean_names.png\" class=\"center\" width=\"50%\" height=\"50%\"/>\n\n## Looking at the data `str`ucture\n\n`str`ucture\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [344 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ species          : chr [1:344] \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: num [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : num [1:344] 3750 3800 3250 NA 3450 ...\n $ sex              : chr [1:344] \"male\" \"female\" \"female\" NA ...\n $ year             : num [1:344] 2007 2007 2007 2007 2007 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Species = col_character(),\n  ..   Island = col_character(),\n  ..   `Bill Length (mm)` = col_double(),\n  ..   `Bill Depth (mm)` = col_double(),\n  ..   `Flipper Length (mm)` = col_double(),\n  ..   `Body Mass (g)` = col_double(),\n  ..   Sex = col_character(),\n  ..   Year = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n## Looking at the data properties\n\n`dim`ensions (rows $\\times$ columns)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344   8\n```\n\n\n:::\n:::\n\n\n. . .\n\n`n`umber of `row`s or `n`umber of `col`umns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 344\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n## `head()`\n\nView the six first elements\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first six rows\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first six elements of the column\nhead(penguins$flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 181 186 195  NA 193 190\n```\n\n\n:::\n:::\n\n\n## Another cool package `{skimr}` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\n\nskim(penguins)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |penguins |\n|Number of rows           |344      |\n|Number of columns        |8        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|character                |3        |\n|numeric                  |5        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|species       |         0|          1.00|   6|   9|     0|        3|          0|\n|island        |         0|          1.00|   5|   9|     0|        3|          0|\n|sex           |        11|          0.97|   4|   6|     0|        2|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable     | n_missing| complete_rate|    mean|     sd|     p0|     p25|     p50|    p75|   p100|hist  |\n|:-----------------|---------:|-------------:|-------:|------:|------:|-------:|-------:|------:|------:|:-----|\n|bill_length_mm    |         2|          0.99|   43.92|   5.46|   32.1|   39.23|   44.45|   48.5|   59.6|▃▇▇▆▁ |\n|bill_depth_mm     |         2|          0.99|   17.15|   1.97|   13.1|   15.60|   17.30|   18.7|   21.5|▅▅▇▇▂ |\n|flipper_length_mm |         2|          0.99|  200.92|  14.06|  172.0|  190.00|  197.00|  213.0|  231.0|▂▇▃▅▂ |\n|body_mass_g       |         2|          0.99| 4201.75| 801.95| 2700.0| 3550.00| 4050.00| 4750.0| 6300.0|▃▇▆▃▂ |\n|year              |         0|          1.00| 2008.03|   0.82| 2007.0| 2007.00| 2008.00| 2009.0| 2009.0|▇▁▇▁▇ |\n\n\n:::\n:::\n\n\n## The pipe operator (`%>%`) {.smaller}\n\n-   The `%>%` operator (`Super + Shift + M`)\n    -   <mark>inserts the input as the first argument in the next function</mark>\n-   To start, you can read it as \"then\"\n-   It is crucial for work in the `{tidyverse}`\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\nWith the `{tidyverse}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <chr>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nOr with `{janitor}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  tabyl(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   species   n   percent\n    Adelie 152 0.4418605\n Chinstrap  68 0.1976744\n    Gentoo 124 0.3604651\n```\n\n\n:::\n:::\n\n:::\n:::\n\n. . .\n\nLet's look at `?count` and `?tabyl`\n\n## Why use `%>%`\n\nChaining arguments is **efficient** and **easy to read**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(species == \"Adelie\",\n         bill_length_mm > 40) %>% \n  select(island, bill_length_mm, body_mass_g) %>% \n  arrange(bill_length_mm) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 3\n   island    bill_length_mm body_mass_g\n   <chr>              <dbl>       <dbl>\n 1 Biscoe              40.1        4300\n 2 Torgersen           40.2        3450\n 3 Dream               40.2        3975\n 4 Dream               40.2        3400\n 5 Torgersen           40.3        3250\n 6 Dream               40.3        4350\n 7 Biscoe              40.5        3200\n 8 Biscoe              40.5        3950\n 9 Biscoe              40.6        3550\n10 Biscoe              40.6        3800\n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n## Why use `%>%`\n\nChaining arguments is **efficient** and **easy to read**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(species == \"Adelie\",\n         bill_length_mm > 40) %>% \n  select(island, bill_length_mm, body_mass_g) %>% \n  arrange(bill_length_mm) \n```\n:::\n\n\n. . .\n\nEquivalent to:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(select(filter(penguins, species == \"Adelie\", bill_length_mm > 40), island, bill_length_mm, body_mass_g), bill_length_mm)\n```\n:::\n\n\n## `%>%` {.smaller}\n\nThe `%>%` works so well in the `{tidyverse}` because <mark>the first argument in (nearly) all functions is the dataframe (tibble)</mark>\n\n<br>\n\nSo you don't need to name the data each time\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\nSo this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  sex        n\n  <chr>  <int>\n1 female   165\n2 male     168\n3 <NA>      11\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nIs equivalent to this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(penguins, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  sex        n\n  <chr>  <int>\n1 female   165\n2 male     168\n3 <NA>      11\n```\n\n\n:::\n:::\n\n:::\n:::\n\n# Next time\n\n## Homework notes\n\nScript on website\n\n-   Download **Homework 1** from the course [Assignments](https://jnese.github.io/intro-DS-R_fall-2023/assignments.html#homework-assignments) page\n-   Work with this .qmd file\n\nSubmit a rendered .html file to Canvas\n\n-   *Assignments \\> Homeworks \\> HW 1*\n\n## Before next class {.smaller}\n\n-   Reading\n    -   [R4DS(2e) Ch 2](https://r4ds.hadley.nz/data-visualize)\n-   Supplemental Learning\n    -   [Codecademy: Introduction to Data Frames in R](https://www.codecademy.com/courses/learn-r/lessons/r-data-frames-intro)\n    -   [Codecademy: Introduction to Visualization with R](https://www.codecademy.com/courses/learn-r/lessons/intro-visualization-ggplot2-r/exercises/layers-and-geoms)\n-   Homework\n    -   Homework 1\n-   Final project\n    -   [Finalize Groups]{style=\"color:#FF0000\"}\n    \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}