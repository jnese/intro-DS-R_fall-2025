{
  "hash": "ef722b9c305e1c935bc4d244c4c35afb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 8: Tidy Data\"\nauthor: \"Joe Nese\"\ninstitute: \"University of Oregon<br>Fall 2024\"\nformat:\n  revealjs: \n    theme: default\n    highlight-style: github\n    incremental: false\n    fig-width: 9\n    fig-height: 3.5\n    scrollable: true\n    multiplex: true\nexecute: \n  echo: true\n  warning: false\nembed-resources: true\n---\n\n\n\n\n\n# Tidy Data \n\nWeek 8\n\n\n## Share\n\n[`{tidylog}`](https://github.com/elbersb/tidylog)\n\n* Provides feedback about `{dplyr}` and `{tidyr}` operations\n\n[view link]{style='color:#D55E00'}\n\n## How I feel about my `R` code sometimes\n\n![](./images/mr_rodgers.png)\n\n## Agenda\n\n* Introduce the concept of tidy data\n* Tidy a simple dataset together with `{tidyr}`\n* Summarize and transform tidy data with `{dplyr}`\n\n**Learning Objectives**\n\n* Understand that the concept of tidy data is useful\n* Understand and be able to apply the `pivot_longer()` and `pivot_wider()` functions\n\n\n## \n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/b467ee99-87e3-4663-ae27-aaf027f940ce_rw_1920.png?h=0573cb8b960ba2f2c8486188761f03e0){width=\"70%\"}\n\n::: aside\nCredit [Allison Horst](https://allisonhorst.com/data-science-art)\n:::\n\n## Providing grammar for: {.smaller}\n\n* Graphics \n  + `{ggplot2}`\n* Data manipulations \n  + `{dplyr}`\n  + `{tidyr}`\n* Expanding area of specialized topics\n  + `{lubridate}`\n  + `{glue}`\n  + `{tidymodels}`\n* Many more...\n\n## Providing grammar for: {.smaller}\n\n* Graphics \n  + `{ggplot2}`\n* Data manipulations\n  + `{dplyr}`\n  + <mark>`{tidyr}`</mark>\n* Expanding area of specialized topics\n  + `{lubridate}`\n  + `{glue}`\n  + `{tidymodels}`\n* Many more...\n\n\n# `{tidyr}`\n\n## `{dplyr}` vs `{tidyr}` {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`{dplyr} `\n\nHelps you manipulate your data\n\n* `select()`\n* `filter()`\n* `mutate()`\n* `summarize()`\n* more...\n:::\n\n::: {.column width=\"50%\" .fragment}\n\n`{tidyr}`\n\nHelps you get your data into a tidy format\n\n* `pivot_longer()`\n* `pivot_wider()`\n* `separate_wider_position()` and `separate_wider_delim()`\n* `separate_wider_regex()`\n* `unite()`\n* `nest()`\n:::\n\n::::\n\n## Data cleaning\n\n> “It is often said that 80% of data analysis is spent on the process of cleaning and preparing the data (Dasu & Johnson, 2003).”\n> - Hadley Wickham (Tidy Data)\n\n. . .\n\n* Persistent and varied challenge\n* Little research on how to do it well\n\n## [Activity]{style='color:#0072B2'}\n\nRun this code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\nlibrary(here)\nlibrary(tidyverse)\n\nstar <- import(here(\"data\", \"star.csv\")) %>% \n  as_tibble()\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,748 × 12\n   schidkn sex   frl   reg_size reg_size_aid small_size white black other totexp\n     <int> <chr> <chr>    <int>        <int>      <int> <int> <int> <int>  <int>\n 1      63 girl  no           0            0          1     1     0     0      7\n 2      20 girl  no           0            0          1     0     1     0     21\n 3      19 boy   yes          0            1          0     0     1     0      0\n 4      69 boy   no           1            0          0     1     0     0     16\n 5      79 boy   yes          0            0          1     1     0     0      5\n 6       5 boy   yes          1            0          0     1     0     0      8\n 7      16 girl  yes          0            1          0     0     1     0     17\n 8      56 girl  no           1            0          0     1     0     0      3\n 9      11 girl  no           0            0          1     0     1     0     11\n10      66 girl  no           0            0          1     1     0     0     10\n# ℹ 5,738 more rows\n# ℹ 2 more variables: tmathss <int>, treadss <int>\n```\n\n\n:::\n:::\n\n\n## [Produce this plot]{style='color:#0072B2'}\n\nWhat do we need here?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-3-1.png){width=864}\n:::\n:::\n\n\n## [Great! Now produce this plot]{style='color:#0072B2'}\n\nWhat's different?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-4-1.png){width=864}\n:::\n:::\n\n\n## [Awesome! Now this one]{style='color:#0072B2'}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-5-1.png){width=864}\n:::\n:::\n\n\n##\n\n![](https://media1.giphy.com/media/nTfdeBvfgzV26zjoFP/giphy.gif?cid=ecf05e47ss10hzpu9f3yca3n0kgavkxygbxncmuh2hww3vpz&ep=v1_gifs_search&rid=giphy.gif&ct=g)\n\n\n\n## Tidy Data {.smaller}\n\n* Each variable is a column\n* Each observation is a row\n* Each cell is a single measurement\n* Each type of observational unit forms a table\n    + We won’t talk much about this point\n\n![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)\n  \n::: aside\n[R4DS](https://r4ds.had.co.nz/tidy-data.html)\n:::\n\n## \n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/85520b8f-4629-4763-8a2a-9ceff27458bf_rw_1920.jpg?h=21007b20ac00cf37318dca645c215453)\n\n::: aside\n[Allison Horst](https://allisonhorst.com/other-r-fun)\n:::\n\n## Common ways data are \"messy\"\n\n* Column headers are values, not variable names\n* Multiple variables stored in one column\n* Variables are stored in both rows and columns\n* See the pivoting [vignette](https://tidyr.tidyverse.org/articles/pivot.html) for examples and solutions\n\n## \n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6e297111-efb7-4555-93d2-085071d1853c_rw_1920.jpg?h=f1951b118eaddaaab8a572422bc16566)\n\n::: aside\n[Allison Horst](https://allisonhorst.com/other-r-fun)\n:::\n\n## Defining tidy data\n\n**Essentially, two rules define tidy data** ^[[Modern Data Science with R](https://mdsr-book.github.io/)]\n\n1. Each row is a case representing the same underlying attribute\n2. Each column is a variable containing the same type of value for each case\n\nThe combination of rows and columns make each observational unit (row) unique, even though cells may be repeated many times (e.g., student identifier)\n\n## Why tidy? {.smaller}\n\n* There are many reasons why you might want to have \"messy\" data\n    + e.g., for other software or specific modeling purposes\n\n. . .\n\n* However, tidy data is an **extremely** useful format generally, and particularly useful when applying tools within the `{tidyverse}`\n\n. . .\n\n* All packages within the `{tidyverse}` are designed to either help you get your data in a tidy format, or assume your data are already in a tidy format\n\n. . .\n\n* Assuming a common data format leads to large jumps in efficiency, as the output from certain functions can be directly input into others\n\n##\n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/fc9b748b-db96-4ed4-aa23-f6e0ffc866ee_rw_1920.jpg?h=8fa394b572089354aa87b1d602b0f887)\n\n::: aside\n[Allison Horst](https://allisonhorst.com/other-r-fun)\n:::\n\n## \n![](https://d33wubrfki0l68.cloudfront.net/795c039ba2520455d833b4034befc8cf360a70ba/558a5/diagrams/data-science-explore.png)\n\n::: asdie\n[R4DS](https://r4ds.had.co.nz/tidy-data.html)\n:::\n\n##\n\n![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExamZrNTVpdmkzNDl2YnNpMmFpbDQzMHU1M2N5NTc4cjI4OGEzNW04diZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/oCjCwnuLpiWbfMb1UA/giphy.webp)\n\n\n## `pivot_*()`\n\nTalk with a neighbor about what you think `pivot_longer()` and `pivot_wider()` do\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e5bad441\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## `{tidyr}` verbs {.smaller}\n\n`pivot_longer()`\n: \"lengthens\" data, increasing the number of rows and decreasing the number of columns\n\n. . .\n\n\n`pivot_wider()`\n: \"widens\" data, increasing the number of columns and decreasing the number of rows\n\n. . .\n\n\n`separate_wider_position()` and `separate_wider_delim()`\n: turns a single character column into multiple columns\n\n. . .\n\n\n`separate_wider_regex()`\n: given a [regular expression](https://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions) for capturing groups, turns each group into a new column\n\n. . .\n\n\n`unite()`\n: paste together multiple columns into one\n\n. . .\n\n\n`nest()`\n: creates a list-column of data frames; you get one row for each group defined by the non-nested columns. This is useful in conjunction with other summaries that work with whole datasets, like models\n\n* **so** powerful\n\n# `pivot_longer()`\n\n## `pivot_longer()`\n\nThere are different ways to `pivot_longer()` that will depend on what your data look like \n\n## `pivot_longer()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"!2,3,4,11\"}\npivot_longer(\n  data,\n  cols,\n  names_to = \"name\",\n  names_prefix = NULL,\n  names_sep = NULL,\n  names_pattern = NULL,\n  names_ptypes = list(),\n  names_transform = list(),\n  names_repair = \"check_unique\",\n  values_to = \"value\",\n  values_drop_na = FALSE,\n  values_ptypes = list(),\n  values_transform = list(),\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n:::\n\n:::: \n\n## `pivot_longer()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5\"}\npivot_longer(\n  data, \n  cols, \n  names_to = \"name\", \n  values_to = \"value\", \n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n:::\n\n:::: \n\n## `pivot_longer()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\npivot_longer(\n  data, \n  cols, \n  names_to = \"name\", \n  values_to = \"value\",\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\na data frame to pivot\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  pivot_wider()\n```\n:::\n\n\n\n*or*\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_wider(df)\n```\n:::\n\n:::\n\n:::: \n\n## `pivot_longer()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npivot_longer(\n  data, \n  cols, \n  names_to = \"name\", \n  values_to = \"value\",\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nThe names of the `col`umns you want to pivot into longer format\n:::\n\n:::: \n\n\n## `pivot_longer()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npivot_longer(\n  data, \n  cols, \n  names_to = \"name\", \n  values_to = \"value\",\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nA string specifying the name of the **new** column to create from the data stored in the `col`umn names of data\n\nCan be a character vector, creating multiple columns, if `names_sep` or `names_pattern` is provided\n:::\n\n:::: \n\n\n## `pivot_longer()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npivot_longer(\n  data, \n  cols, \n  names_to = \"name\", \n  values_to = \"value\",\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nA string specifying the name of the **new** column to create from the data stored in cell values of the `col`umns\n:::\n\n:::: \n\n## Messy data\n\nWhat makes this data messy? Or, why is this data not tidy?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidyr::relig_income\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Messy data\n\nColumn headers are values (data!), not variable names\n\n\n::: {.cell highlight.output='2'}\n\n```{.r .cell-code}\ntidyr::relig_income\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()` \n\nNecessary arguments\n\n* `data` - of course\n* `cols` – which columns you will pivot longer\n* `names_to` – new variable name (in quotes) for those `cols`\n* `values_to` – new variable name (in quotes) for the cell values\n\n## Let's `pivot_longer()` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n pivot_longer(\n  cols = _____,\n  names_to = \"_____\",\n  values_to = \"_____\"\n )\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()` {.smaller}\n\nWhich `cols` do we want to pivot?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n pivot_longer(\n  cols = c(`<$10k`:`>150k`),\n  names_to = \"_____\",\n  values_to = \"_____\"\n )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()` {.smaller}\n\nWhich `cols` do we want to pivot?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n pivot_longer(\n  cols = -1,\n  names_to = \"_____\",\n  values_to = \"_____\"\n )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()` {.smaller}\n\nWhich `cols` to we want to pivot?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n pivot_longer(\n  cols = -religion,\n  names_to = \"_____\",\n  values_to = \"_____\"\n )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()` {.smaller}\n\nThose `cols` names will become a new column.\n\nWhat should we that new column of `col names`?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n pivot_longer(\n  cols = -religion,\n  names_to = \"income\",\n  values_to = \"_____\"\n )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()` {.smaller}\n\nThe values of those \"income\" `cols` will become a new column.\n\nWhat should we that new column of `col values`?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n pivot_longer(\n  cols = -religion,\n  names_to = \"income\",\n  values_to = \"frequency\"\n )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n## Let's `pivot_longer()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nrelig_income %>% \n  pivot_longer(\n    cols = -religion,\n    names_to = \"income\",\n    values_to = \"frequency\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 3\n   religion income             frequency\n   <chr>    <chr>                  <dbl>\n 1 Agnostic <$10k                     27\n 2 Agnostic $10-20k                   34\n 3 Agnostic $20-30k                   60\n 4 Agnostic $30-40k                   81\n 5 Agnostic $40-50k                   76\n 6 Agnostic $50-75k                  137\n 7 Agnostic $75-100k                 122\n 8 Agnostic $100-150k                109\n 9 Agnostic >150k                     84\n10 Agnostic Don't know/refused        96\n# ℹ 170 more rows\n```\n\n\n:::\n:::\n\n\n## Why are tidy data useful? {.smaller}\n\nWhen used with `{dplyr}`, tidy data can result in large gains in efficiency\n\nFor example, suppose we want to calculate the percent of respondents in each income category `by` *religion*\n\n. . .\n\n**First** let's save our pivoted data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_long <- relig_income %>% \n  pivot_longer(\n    cols = -religion,\n    names_to = \"income\",\n    values_to = \"frequency\"\n  ) \n```\n:::\n\n\n## Why are tidy data useful? {.smaller}\n\n**Then** let's relevel the `income` variable so it is ordered in a meaningful way\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_long <- relig_long %>% \n  mutate(income = fct_relevel(income, \n                              \"Don't know/refused\", \n                              \"<$10k\", \n                              \"$10-20k\", \n                              \"$20-30k\", \n                              \"$30-40k\", \n                              \"$40-50k\", \n                              \"$50-75k\", \n                              \"$75-100k\", \n                              \"$100-150k\", \n                              \">150k\")) \n```\n:::\n\n\n## Why are tidy data useful? {.smaller}\n\n**Now** let's group by `religion` to create a `pct` variable that indicates the percent of respondents in each income category *within* each religion category\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_long %>% \n  group_by(religion) %>% \n  mutate(pct = frequency/sum(frequency) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 4\n# Groups:   religion [18]\n   religion income             frequency   pct\n   <chr>    <fct>                  <dbl> <dbl>\n 1 Agnostic <$10k                     27  3.27\n 2 Agnostic $10-20k                   34  4.12\n 3 Agnostic $20-30k                   60  7.26\n 4 Agnostic $30-40k                   81  9.81\n 5 Agnostic $40-50k                   76  9.20\n 6 Agnostic $50-75k                  137 16.6 \n 7 Agnostic $75-100k                 122 14.8 \n 8 Agnostic $100-150k                109 13.2 \n 9 Agnostic >150k                     84 10.2 \n10 Agnostic Don't know/refused        96 11.6 \n# ℹ 170 more rows\n```\n\n\n:::\n:::\n\n\n## Why are tidy data useful? {.smaller}\n\n**Now** we can facet by religion and see all data at once!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_long %>% \n  group_by(religion) %>% \n  mutate(pct = frequency/sum(frequency) * 100) %>% \n  ggplot(aes(income, pct)) +\n  geom_point() +\n  geom_line(group = 1) +\n  facet_wrap(~religion)\n```\n\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-33-1.png){width=864}\n:::\n:::\n\n\n## Messy data {.smaller}\n\nMany variables in column names\n\n`tidyr::who` (modified slightly)\n\n\n::: {.cell highlight.output='2'}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,240 × 60\n   country     iso2  iso3   year new_sp_m_014 new_sp_m_1524 new_sp_m_2534\n   <chr>       <chr> <chr> <dbl>        <dbl>         <dbl>         <dbl>\n 1 Afghanistan AF    AFG    1980           NA            NA            NA\n 2 Afghanistan AF    AFG    1981           NA            NA            NA\n 3 Afghanistan AF    AFG    1982           NA            NA            NA\n 4 Afghanistan AF    AFG    1983           NA            NA            NA\n 5 Afghanistan AF    AFG    1984           NA            NA            NA\n 6 Afghanistan AF    AFG    1985           NA            NA            NA\n 7 Afghanistan AF    AFG    1986           NA            NA            NA\n 8 Afghanistan AF    AFG    1987           NA            NA            NA\n 9 Afghanistan AF    AFG    1988           NA            NA            NA\n10 Afghanistan AF    AFG    1989           NA            NA            NA\n# ℹ 7,230 more rows\n# ℹ 53 more variables: new_sp_m_3544 <dbl>, new_sp_m_4554 <dbl>,\n#   new_sp_m_5564 <dbl>, new_sp_m_65 <dbl>, new_sp_f_014 <dbl>,\n#   new_sp_f_1524 <dbl>, new_sp_f_2534 <dbl>, new_sp_f_3544 <dbl>,\n#   new_sp_f_4554 <dbl>, new_sp_f_5564 <dbl>, new_sp_f_65 <dbl>,\n#   new_sn_m_014 <dbl>, new_sn_m_1524 <dbl>, new_sn_m_2534 <dbl>,\n#   new_sn_m_3544 <dbl>, new_sn_m_4554 <dbl>, new_sn_m_5564 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Messy data {.smaller}\n\nMany variables in column names\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\nExample column names\n\n[new_]{style='color:#D55E00'}[sp_]{style='color:#009E73'}[m_]{style='color:#0072B2'}[014]{style='color:#CC79A7'}\n\n[new_]{style='color:#D55E00'}[rel_]{style='color:#009E73'}[f_]{style='color:#0072B2'}[65]{style='color:#CC79A7'}\n:::\n\n::: {.column width=\"60%\" .fragment}\nall `col` names start with [new_]{style='color:#D55E00'}, which we don't need\n\nfollowed by a diagnosis category: [\"sp_\" \"sn_\" \"ep_\" \"rel_\"]{style='color:#009E73'}\n\nthen [gender]{style='color:#0072B2'}, which in these data are limited to [\"m_\"]{style='color:#0072B2'} or [\"f_\"]{style='color:#0072B2'}\n\nand last an [age range]{style='color:#CC79A7'}\n\n<u>and</u> these are separated by underscores `_` which is quite convenient, as we'll see\n:::\n\n::::\n\n. . .\n\nThat's a lot of information in the column names!\n\n## Messy data\n\nMany variables in column names\n\nNecessary arguments\n\n* `data` - of course\n* `cols` – which columns you will pivot longer\n* `names_to` – new variable name**s** (in quotes) for those `cols`\n* `values_to` – new variable name (in quotes) for the cell values\n\n. . .\n\n* <mark>`names_separate` – how to *separate* those `cols` names</mark>\n\n## Let's apply it\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|3|4|5|6\"}\nwho_r %>%\n pivot_longer(\n  cols = new_sp_m_014:new_rel_f_65,\n  names_to = c(\"new\", \"diagnosis\", \"sex\", \"age\"), \n  names_sep = \"_\",\n  values_to = \"count\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405,440 × 9\n   country     iso2  iso3   year new   diagnosis sex   age   count\n   <chr>       <chr> <chr> <dbl> <chr> <chr>     <chr> <chr> <dbl>\n 1 Afghanistan AF    AFG    1980 new   sp        m     014      NA\n 2 Afghanistan AF    AFG    1980 new   sp        m     1524     NA\n 3 Afghanistan AF    AFG    1980 new   sp        m     2534     NA\n 4 Afghanistan AF    AFG    1980 new   sp        m     3544     NA\n 5 Afghanistan AF    AFG    1980 new   sp        m     4554     NA\n 6 Afghanistan AF    AFG    1980 new   sp        m     5564     NA\n 7 Afghanistan AF    AFG    1980 new   sp        m     65       NA\n 8 Afghanistan AF    AFG    1980 new   sp        f     014      NA\n 9 Afghanistan AF    AFG    1980 new   sp        f     1524     NA\n10 Afghanistan AF    AFG    1980 new   sp        f     2534     NA\n# ℹ 405,430 more rows\n```\n\n\n:::\n:::\n\n\n## Don’t get discouraged\n\n* This is tricky!\n* Takes practice\n* Takes trial and error\n* Takes looking at the [help documentation](https://tidyr.tidyverse.org/reference/pivot_longer.html) and the [vignette](https://tidyr.tidyverse.org/articles/pivot.html) - <u>a lot</u>\n* Takes trial and error!\n* But you are ~~rarely~~ never gifted with tidy data\n\n## Declaring `cols` to `pivot_longer` {.smaller}\n\nWe can declare the columns to pivot other ways\n\nThe important part is just being clear which columns should be part of the gather\n\nAll of the below are equivalent\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n`relig_income` data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n  pivot_longer(\n    cols = -religion,\n    ...\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_income %>% \n  pivot_longer(\n    cols = -1,\n    ...\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(relig_income) %>% \n  pivot_longer(\n    cols = c(`<$10k`:`Don't know/refused`),\n    ...\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n`who` data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(who) %>% \n  pivot_longer(\n    cols = new_sp_m_014:new_rel_f_65,\n    ...\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(who) %>% \n  pivot_longer(\n    cols = starts_with(\"new_\"),\n    ...\n```\n:::\n\n:::\n\n::::\n\n## Let’s look at some education data\n\nLoad the `exam1.csv` data from the course website or from your cloned course repo\n\n* Did you clone the course repo? \n\nStart a new `R` script or qmd\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nexam <- read_csv(here(\"data\", \"exam1.csv\"))\n```\n:::\n\n\n## exam1 data\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 × 20\n   stu_name gender item_1 item_2 item_3 item_4 item_5 item_6 item_7 item_8\n   <chr>    <chr>   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Adam     M           1      1      1      1      1      1      1      0\n 2 Anne     F           1      1      1      1      1      1      1      1\n 3 Audrey   F           1      1      1      1      1      1      1      1\n 4 Barbara  F           1      1      1      1      0      0      1      0\n 5 Bert     M           1      1      1      1      1      0      1      0\n 6 Betty    F           1      1      1      1      1      1      1      1\n 7 Blaise   M           1      1      1      1      1      1      1      1\n 8 Brenda   F           1      1      1      1      1      1      1      1\n 9 Britton  F           1      1      1      0      1      1      1      1\n10 Carol    F           1      1      1      1      0      0      1      0\n# ℹ 25 more rows\n# ℹ 10 more variables: item_9 <dbl>, item_10 <dbl>, item_11 <dbl>,\n#   item_12 <dbl>, item_13 <dbl>, item_14 <dbl>, item_15 <dbl>, item_16 <dbl>,\n#   item_17 <dbl>, item_18 <dbl>\n```\n\n\n:::\n:::\n\n\n## Talk with a neighbor\n\n* Are these data tidy?\n* If not, what needs to happen to make them tidy?\n* What are the variables? What are the values?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_d9b02d9d\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## exam1 data\n\nWhat do we want?\n\n. . .\n\nLet’s change all `item` variables into two variables: `item` and `score`\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 630 × 4\n   stu_name gender item    score\n   <chr>    <chr>  <chr>   <dbl>\n 1 Adam     M      item_1      1\n 2 Adam     M      item_2      1\n 3 Adam     M      item_3      1\n 4 Adam     M      item_4      1\n 5 Adam     M      item_5      1\n 6 Adam     M      item_6      1\n 7 Adam     M      item_7      1\n 8 Adam     M      item_8      0\n 9 Adam     M      item_9      0\n10 Adam     M      item_10     0\n# ℹ 620 more rows\n```\n\n\n:::\n:::\n\n\n## Try to tidy! {.smaller}\n\nNecessary arguments\n\n* `data` - of course\n* `cols` – which columns you will pivot longer\n* `names_to` – new variable name (in quotes) for those `cols`\n    + *\"item\"*\n* `values_to` – new variable name (in quotes) for the cell values\n    + *\"score\"*\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_806a40c0\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n**Don't look ahead!**\n\n## exam1 tidy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam %>% \n  pivot_longer(\n    cols = starts_with(\"item\"),\n    names_to = \"item\",\n    values_to = \"score\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 630 × 4\n   stu_name gender item    score\n   <chr>    <chr>  <chr>   <dbl>\n 1 Adam     M      item_1      1\n 2 Adam     M      item_2      1\n 3 Adam     M      item_3      1\n 4 Adam     M      item_4      1\n 5 Adam     M      item_5      1\n 6 Adam     M      item_6      1\n 7 Adam     M      item_7      1\n 8 Adam     M      item_8      0\n 9 Adam     M      item_9      0\n10 Adam     M      item_10     0\n# ℹ 620 more rows\n```\n\n\n:::\n:::\n\n\n## exam1 tidy\n\nLet's go one step further\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nexam %>% \n  pivot_longer(\n    cols = starts_with(\"item\"),\n    names_to = \"item\",\n    names_prefix = \"item_\", \n    values_to = \"score\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 630 × 4\n   stu_name gender item  score\n   <chr>    <chr>  <chr> <dbl>\n 1 Adam     M      1         1\n 2 Adam     M      2         1\n 3 Adam     M      3         1\n 4 Adam     M      4         1\n 5 Adam     M      5         1\n 6 Adam     M      6         1\n 7 Adam     M      7         1\n 8 Adam     M      8         0\n 9 Adam     M      9         0\n10 Adam     M      10        0\n# ℹ 620 more rows\n```\n\n\n:::\n:::\n\n\n## exam1 tidy {.smaller}\n\nAnd another step\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\n(exam_tidy <- exam %>% \n  pivot_longer(\n    cols = starts_with(\"item\"),\n    names_to = \"item\",\n    names_prefix = \"item_\",\n    names_transform = list(item = as.integer),\n    values_to = \"score\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 630 × 4\n   stu_name gender  item score\n   <chr>    <chr>  <int> <dbl>\n 1 Adam     M          1     1\n 2 Adam     M          2     1\n 3 Adam     M          3     1\n 4 Adam     M          4     1\n 5 Adam     M          5     1\n 6 Adam     M          6     1\n 7 Adam     M          7     1\n 8 Adam     M          8     0\n 9 Adam     M          9     0\n10 Adam     M         10     0\n# ℹ 620 more rows\n```\n\n\n:::\n:::\n\n\n. . .\n\nWhy not quotes around *item* here, but quotes as it appears in `names_to`?\n\n## One more look at `names_prefix = `\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nwho_r %>%\n pivot_longer(\n  cols = new_sp_m_014:new_rel_f_65,\n  names_to = c(\"new\", \"diagnosis\", \"sex\", \"age\"), \n  names_sep = \"_\",\n  values_to = \"count\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405,440 × 9\n   country     iso2  iso3   year new   diagnosis sex   age   count\n   <chr>       <chr> <chr> <dbl> <chr> <chr>     <chr> <chr> <dbl>\n 1 Afghanistan AF    AFG    1980 new   sp        m     014      NA\n 2 Afghanistan AF    AFG    1980 new   sp        m     1524     NA\n 3 Afghanistan AF    AFG    1980 new   sp        m     2534     NA\n 4 Afghanistan AF    AFG    1980 new   sp        m     3544     NA\n 5 Afghanistan AF    AFG    1980 new   sp        m     4554     NA\n 6 Afghanistan AF    AFG    1980 new   sp        m     5564     NA\n 7 Afghanistan AF    AFG    1980 new   sp        m     65       NA\n 8 Afghanistan AF    AFG    1980 new   sp        f     014      NA\n 9 Afghanistan AF    AFG    1980 new   sp        f     1524     NA\n10 Afghanistan AF    AFG    1980 new   sp        f     2534     NA\n# ℹ 405,430 more rows\n```\n\n\n:::\n:::\n\n\n\n## One more look at `names_prefix`\n\n\n::: {.cell highlight.output='2'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nwho_r %>%\n pivot_longer(\n  cols = new_sp_m_014:new_rel_f_65,\n  names_to = c(\"diagnosis\", \"sex\", \"age\"), \n  names_prefix = \"new_\",\n  names_sep = \"_\",\n  values_to = \"count\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405,440 × 8\n   country     iso2  iso3   year diagnosis sex   age   count\n   <chr>       <chr> <chr> <dbl> <chr>     <chr> <chr> <dbl>\n 1 Afghanistan AF    AFG    1980 sp        m     014      NA\n 2 Afghanistan AF    AFG    1980 sp        m     1524     NA\n 3 Afghanistan AF    AFG    1980 sp        m     2534     NA\n 4 Afghanistan AF    AFG    1980 sp        m     3544     NA\n 5 Afghanistan AF    AFG    1980 sp        m     4554     NA\n 6 Afghanistan AF    AFG    1980 sp        m     5564     NA\n 7 Afghanistan AF    AFG    1980 sp        m     65       NA\n 8 Afghanistan AF    AFG    1980 sp        f     014      NA\n 9 Afghanistan AF    AFG    1980 sp        f     1524     NA\n10 Afghanistan AF    AFG    1980 sp        f     2534     NA\n# ℹ 405,430 more rows\n```\n\n\n:::\n:::\n\n\n## Why are tidy data useful?\n\n**Question**: How would we calculate the `prop`ortion of students responding correctly to each item?\n\n\n::: {.cell output-location='fragment'}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n    item   prop\n   <int>  <dbl>\n 1     1 1     \n 2     2 1     \n 3     3 1     \n 4     4 0.914 \n 5     5 0.886 \n 6     6 0.857 \n 7     7 0.886 \n 8     8 0.771 \n 9     9 0.857 \n10    10 0.686 \n11    11 0.343 \n12    12 0.171 \n13    13 0.2   \n14    14 0.0857\n15    15 0.0286\n16    16 0.0286\n17    17 0.0286\n18    18 0     \n```\n\n\n:::\n:::\n\n\n## Why are tidy data useful?\n\n**Answer**: We `group_by(item)` and `summarize()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_tidy %>% \n  group_by(item) %>% \n  summarize(prop = mean(score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n    item   prop\n   <int>  <dbl>\n 1     1 1     \n 2     2 1     \n 3     3 1     \n 4     4 0.914 \n 5     5 0.886 \n 6     6 0.857 \n 7     7 0.886 \n 8     8 0.771 \n 9     9 0.857 \n10    10 0.686 \n11    11 0.343 \n12    12 0.171 \n13    13 0.2   \n14    14 0.0857\n15    15 0.0286\n16    16 0.0286\n17    17 0.0286\n18    18 0     \n```\n\n\n:::\n:::\n\n\n## Why are tidy data useful?\n\n**Question**: What if we wanted to know the `prop`ortion correct for each item by gender?\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nexam_tidy %>% \n  group_by(item, gender) %>% \n  summarize(prop = mean(score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 × 3\n# Groups:   item [18]\n    item gender  prop\n   <int> <chr>  <dbl>\n 1     1 F      1    \n 2     1 M      1    \n 3     2 F      1    \n 4     2 M      1    \n 5     3 F      1    \n 6     3 M      1    \n 7     4 F      0.889\n 8     4 M      0.941\n 9     5 F      0.833\n10     5 M      0.941\n# ℹ 26 more rows\n```\n\n\n:::\n:::\n\n\n## More data\n\nLoad the `year-end_scores.csv` data from the course website or from your cloned course repo\n    \nName the data `scores`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n(scores <- read_csv(here(\"data\", \"year-end_scores.csv\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n      id   sex ethnicity  sped frl    math  read\n   <dbl> <dbl>     <dbl> <dbl> <lgl> <dbl> <dbl>\n 1     1     0         5     0 NA      101    99\n 2     2     1         2     0 NA       96    NA\n 3     3     1         5     0 NA      131   119\n 4     4     1         4     0 NA       84    93\n 5     5     0         1     0 NA      110   118\n 6     6     0         5     1 NA       NA   105\n 7     7     1         5     1 NA       93    99\n 8     8     0         3     0 NA       81    77\n 9     9     1         2     0 NA      129   135\n10    10     0         1     0 NA      117   122\n```\n\n\n:::\n:::\n\n\n## Talk as a class\n\n* Are these data tidy?\n    + If you wanted to summarize scores, or plot and use facet, what would you use to `group_by()` or `facet_wrap()`?\n* What do we need to do to make these tidy?\n    + What `pivot_longer()` arguments do we need?\n\n. . .\n\nWork as a class to tidy, name new data `scores_tidy`\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e86036eb\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## Let's try another\n\nLoad the `longitudinal_sim.csv` data from course website or your cloned course repo\n\nName the data `sim`\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- read_csv(here(\"data\", \"longitudinal_sim.csv\"))\n```\n:::\n\n\n## Talk with a neighbor\n\n* Are these data tidy?\n    + If you wanted to summarize scores, or plot and use facet, what would you use to `group_by()` or `facet_wrap()`?\n* What do we need to do to make these tidy?\n    + What `pivot_longer()` arguments do we need?\n\n. . .\n\nWork with your neighbor to tidy, name new data `tidy_sim`\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_9416420f\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\nTell me your solutions [demo a couple]{style='color:#D55E00'}\n\n\n\n\n\n## Other possible issues {.smaller}\n\nThe `hiv` data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiv <- read_csv(here(\"data\", \"hiv.csv\"))\n```\n:::\n\n\n## Other possible issues {.smaller}\n\nLet's make some manipulations to get a sample of the data\n\n* (just `{dplyr}` variety `filter()` and `select()`) \n\n\n::: {.cell}\n\n```{.r .cell-code}\n(hiv_r <- hiv %>% \n  filter(country == \"France\" |\n          country == \"South Africa\" |\n            country == \"United States\") %>% \n  select(country, `1979`, `1989`, `1999`, `2009`))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  country        `1979` `1989` `1999` `2009`\n  <chr>           <dbl> <lgl>   <dbl>  <dbl>\n1 France        NA      NA        0.3    0.4\n2 South Africa  NA      NA       14.8   17.2\n3 United States  0.0318 NA        0.5    0.6\n```\n\n\n:::\n:::\n\n\n. . .\n\n* Are these data tidy?\n* How would you add a new variable - say, *percent HIV*?\n* Discuss how you would transform these data, if at all\n\n## Tidy the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(hiv_tidy <- hiv_r %>% \n  pivot_longer(\n    cols = -1,\n    names_to = \"year\",\n    values_to = \"percentage\"\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   country       year  percentage\n   <chr>         <chr>      <dbl>\n 1 France        1979     NA     \n 2 France        1989     NA     \n 3 France        1999      0.3   \n 4 France        2009      0.4   \n 5 South Africa  1979     NA     \n 6 South Africa  1989     NA     \n 7 South Africa  1999     14.8   \n 8 South Africa  2009     17.2   \n 9 United States 1979      0.0318\n10 United States 1989     NA     \n11 United States 1999      0.5   \n12 United States 2009      0.6   \n```\n\n\n:::\n:::\n\n\n## Let's plot it\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiv_tidy %>% \n  ggplot(aes(year, percentage, color = country, group = country)) +\n  geom_point(size = 4) +\n  geom_line(size = 2)\n```\n\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-63-1.png){width=864}\n:::\n:::\n\n\n## Let's plot it\n\nThere is a problem with the data – what is it?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-64-1.png){width=864}\n:::\n:::\n\n\n. . .\n\nWhy aren’t lines connecting for the United States?\n\n## Missing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiv_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   country       year  percentage\n   <chr>         <chr>      <dbl>\n 1 France        1979     NA     \n 2 France        1989     NA     \n 3 France        1999      0.3   \n 4 France        2009      0.4   \n 5 South Africa  1979     NA     \n 6 South Africa  1989     NA     \n 7 South Africa  1999     14.8   \n 8 South Africa  2009     17.2   \n 9 United States 1979      0.0318\n10 United States 1989     NA     \n11 United States 1999      0.5   \n12 United States 2009      0.6   \n```\n\n\n:::\n:::\n\n\n## Drop `NA`s\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiv_tidy %>% \n  drop_na(percentage)\n```\n:::\n\n\n**OR**\n\n(not generally ideal unless you are **certain** you can remove these missing data)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|7\"}\nhiv_tidy <- hiv_r %>% \n  pivot_longer(\n    cols = -1,\n    names_to = \"year\",\n    values_to = \"percentage\",\n    names_transform = list(year = as.integer),\n    values_drop_na = TRUE\n  )\n```\n:::\n\n\n## Plot again\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhiv_tidy %>% \n  ggplot(aes(year, percentage, color = country, group = country)) +\n  geom_point(size = 4) +\n  geom_line(size = 2)\n```\n\n::: {.cell-output-display}\n![](w8_tidydata_files/figure-revealjs/unnamed-chunk-68-1.png){width=864}\n:::\n:::\n\n\n# `pivot_wider()`\n\n## [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html)\n\nTidy data are excellent when conducting preliminary descriptive analyses, plotting data, linear models\n\n* Occasionally, you need the data in a different format\n    + For example, if you're using other packages for analysis\n\n## `pivot_wider()`\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_wider(\n  data,\n  ...,\n  id_cols = NULL,\n  names_from = name,\n  names_prefix = \"\",\n  names_sep = \"_\",\n  names_glue = NULL,\n  names_sort = FALSE,\n  names_vary = \"fastest\",\n  names_expand = FALSE\n  names_repair = \"check_unique\",\n  values_from = value,\n  values_fill = NULL,\n  values_fn = NULL,\n  unused_fn = NULL\n)\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n:::\n\n::::\n\n## `pivot_wider()`\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2,5,13\"}\npivot_wider(\n  data,\n  ...,\n  id_cols = NULL,\n  names_from = name,\n  names_prefix = \"\",\n  names_sep = \"_\",\n  names_glue = NULL,\n  names_sort = FALSE,\n  names_vary = \"fastest\",\n  names_expand = FALSE\n  names_repair = \"check_unique\",\n  values_from = value,\n  values_fill = NULL,\n  values_fn = NULL,\n  unused_fn = NULL\n)\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n:::\n\n::::\n\n## `pivot_wider()`\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_wider(\n  data, \n  names_from = name, \n  values_from = value \n)\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n:::\n\n::::\n\n\n## `pivot_wider()`\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npivot_wider(\n  data, \n  names_from = name, \n  values_from = value \n)\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\nThe names of the (tidy) column (or columns) from which to get the name of the new data columns\n:::\n\n::::\n\n## `pivot_wider()`\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npivot_wider(\n  data, \n  names_from = name, \n  values_from = value \n)\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\nThe names of the (tidy) column (or columns) from which to get the the cell values\n:::\n\n::::\n\n## An example\n\n`tidyr::fish_encounters`: when fish swimming down a river are detected by automatic monitoring stations\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidyr::fish_encounters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 114 × 3\n   fish  station  seen\n   <fct> <fct>   <int>\n 1 4842  Release     1\n 2 4842  I80_1       1\n 3 4842  Lisbon      1\n 4 4842  Rstr        1\n 5 4842  Base_TD     1\n 6 4842  BCE         1\n 7 4842  BCW         1\n 8 4842  BCE2        1\n 9 4842  BCW2        1\n10 4842  MAE         1\n# ℹ 104 more rows\n```\n\n\n:::\n:::\n\n\n## An example\n\nSo tidy, so nice...let's muck it up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_encounters %>% \n  pivot_wider(\n    names_from = station, \n    values_from = seen,\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 12\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n 1 4842        1     1      1     1       1     1     1     1     1     1     1\n 2 4843        1     1      1     1       1     1     1     1     1     1     1\n 3 4844        1     1      1     1       1     1     1     1     1     1     1\n 4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n 5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n 6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n 7 4849        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n 8 4850        1     1     NA     1       1     1     1    NA    NA    NA    NA\n 9 4851        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n10 4854        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n11 4855        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n12 4857        1     1      1     1       1     1     1     1     1    NA    NA\n13 4858        1     1      1     1       1     1     1     1     1     1     1\n14 4859        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n15 4861        1     1      1     1       1     1     1     1     1     1     1\n16 4862        1     1      1     1       1     1     1     1     1    NA    NA\n17 4863        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n18 4864        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n19 4865        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n```\n\n\n:::\n:::\n\n\n## An example\n\nThat's a lot of `NA` values. But are they really \"missing\"?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_encounters %>% \n  pivot_wider(\n    names_from = station, \n    values_from = seen,\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 12\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n 1 4842        1     1      1     1       1     1     1     1     1     1     1\n 2 4843        1     1      1     1       1     1     1     1     1     1     1\n 3 4844        1     1      1     1       1     1     1     1     1     1     1\n 4 4845        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n 5 4847        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n 6 4848        1     1      1     1      NA    NA    NA    NA    NA    NA    NA\n 7 4849        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n 8 4850        1     1     NA     1       1     1     1    NA    NA    NA    NA\n 9 4851        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n10 4854        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n11 4855        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n12 4857        1     1      1     1       1     1     1     1     1    NA    NA\n13 4858        1     1      1     1       1     1     1     1     1     1     1\n14 4859        1     1      1     1       1    NA    NA    NA    NA    NA    NA\n15 4861        1     1      1     1       1     1     1     1     1     1     1\n16 4862        1     1      1     1       1     1     1     1     1    NA    NA\n17 4863        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n18 4864        1     1     NA    NA      NA    NA    NA    NA    NA    NA    NA\n19 4865        1     1      1    NA      NA    NA    NA    NA    NA    NA    NA\n```\n\n\n:::\n:::\n\n\n## An example\n\nThose `NA`s should be zeroes.\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nfish_encounters %>% \n  pivot_wider(\n    names_from = station, \n    values_from = seen,\n    values_fill = list(seen = 0)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 12\n   fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE   MAW\n   <fct>   <int> <int>  <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n 1 4842        1     1      1     1       1     1     1     1     1     1     1\n 2 4843        1     1      1     1       1     1     1     1     1     1     1\n 3 4844        1     1      1     1       1     1     1     1     1     1     1\n 4 4845        1     1      1     1       1     0     0     0     0     0     0\n 5 4847        1     1      1     0       0     0     0     0     0     0     0\n 6 4848        1     1      1     1       0     0     0     0     0     0     0\n 7 4849        1     1      0     0       0     0     0     0     0     0     0\n 8 4850        1     1      0     1       1     1     1     0     0     0     0\n 9 4851        1     1      0     0       0     0     0     0     0     0     0\n10 4854        1     1      0     0       0     0     0     0     0     0     0\n11 4855        1     1      1     1       1     0     0     0     0     0     0\n12 4857        1     1      1     1       1     1     1     1     1     0     0\n13 4858        1     1      1     1       1     1     1     1     1     1     1\n14 4859        1     1      1     1       1     0     0     0     0     0     0\n15 4861        1     1      1     1       1     1     1     1     1     1     1\n16 4862        1     1      1     1       1     1     1     1     1     0     0\n17 4863        1     1      0     0       0     0     0     0     0     0     0\n18 4864        1     1      0     0       0     0     0     0     0     0     0\n19 4865        1     1      1     0       0     0     0     0     0     0     0\n```\n\n\n:::\n:::\n\n\n## Remember `scores_tidy`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 7\n      id   sex ethnicity  sped frl   content score\n   <dbl> <dbl>     <dbl> <dbl> <lgl> <chr>   <dbl>\n 1     1     0         5     0 NA    math      101\n 2     1     0         5     0 NA    read       99\n 3     2     1         2     0 NA    math       96\n 4     2     1         2     0 NA    read       NA\n 5     3     1         5     0 NA    math      131\n 6     3     1         5     0 NA    read      119\n 7     4     1         4     0 NA    math       84\n 8     4     1         4     0 NA    read       93\n 9     5     0         1     0 NA    math      110\n10     5     0         1     0 NA    read      118\n11     6     0         5     1 NA    math       NA\n12     6     0         5     1 NA    read      105\n13     7     1         5     1 NA    math       93\n14     7     1         5     1 NA    read       99\n15     8     0         3     0 NA    math       81\n16     8     0         3     0 NA    read       77\n17     9     1         2     0 NA    math      129\n18     9     1         2     0 NA    read      135\n19    10     0         1     0 NA    math      117\n20    10     0         1     0 NA    read      122\n```\n\n\n:::\n:::\n\n\n## Untidy `scores_tidy` {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_tidy %>% \n  pivot_wider(\n    names_from = content,\n    values_from = score\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n      id   sex ethnicity  sped frl    math  read\n   <dbl> <dbl>     <dbl> <dbl> <lgl> <dbl> <dbl>\n 1     1     0         5     0 NA      101    99\n 2     2     1         2     0 NA       96    NA\n 3     3     1         5     0 NA      131   119\n 4     4     1         4     0 NA       84    93\n 5     5     0         1     0 NA      110   118\n 6     6     0         5     1 NA       NA   105\n 7     7     1         5     1 NA       93    99\n 8     8     0         3     0 NA       81    77\n 9     9     1         2     0 NA      129   135\n10    10     0         1     0 NA      117   122\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\" .fragment}\nSame as the original data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(here(\"data\", \"year-end_scores.csv\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n      id   sex ethnicity  sped frl    math  read\n   <dbl> <dbl>     <dbl> <dbl> <lgl> <dbl> <dbl>\n 1     1     0         5     0 NA      101    99\n 2     2     1         2     0 NA       96    NA\n 3     3     1         5     0 NA      131   119\n 4     4     1         4     0 NA       84    93\n 5     5     0         1     0 NA      110   118\n 6     6     0         5     1 NA       NA   105\n 7     7     1         5     1 NA       93    99\n 8     8     0         3     0 NA       81    77\n 9     9     1         2     0 NA      129   135\n10    10     0         1     0 NA      117   122\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n## Let's do this together {.smaller}\n\nUse `pivot_wider()` to change *sim_tidy* back to *sim*\n\n:::: {.columns}\n\n::: {.column width=\"250%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 4\n     sid wave  content score\n   <dbl> <chr> <chr>   <dbl>\n 1     1 1     math       95\n 2     1 2     math       98\n 3     1 3     math      102\n 4     1 4     math      105\n 5     1 1     rdg        96\n 6     1 2     rdg        98\n 7     1 3     rdg       101\n 8     1 4     rdg       103\n 9     2 1     math      101\n10     2 2     math      103\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"75%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsim\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n    sid wave_1_math wave_2_math wave_3_math wave_4_math wave_1_rdg wave_2_rdg\n  <dbl>       <dbl>       <dbl>       <dbl>       <dbl>      <dbl>      <dbl>\n1     1          95          98         102         105         96         98\n2     2         101         103         107         109        108        110\n3     3          99         103         106         110        103        106\n4     4         109         111         115         116        108        109\n5     5         101         104         107         113         92         95\n# ℹ 2 more variables: wave_3_rdg <dbl>, wave_4_rdg <dbl>\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## Longer then wider {.smaller}\n\nSome problems can’t be solved by pivoting in a single direction\n\nHere is an example of how you might combine `pivot_longer()` and `pivot_wider()` to solve more complex problems\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim2 <- read_csv(here(\"data\", \"longitudinal_sim2.csv\"))\nsim2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 19\n     SID male_g6 male_g7 male_g8 ell_g6 ell_g7 ell_g8 sped_g6 sped_g7 sped_g8\n   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n 1     1       1       1       1      0      0      0       0       0       0\n 2     2       0       0       0      0      0      0       0       0       0\n 3     3       1       1       1      0      0      0       0       0       0\n 4     4       1       1       1      0      0      0       0       0       0\n 5     5       0       0       0      0      0      0       1       1       1\n 6     6       0       0       0      0      0      0       0       0       0\n 7     7       1       1       1      0      0      0       0       0       0\n 8     8       1       1       1      1      1      1       0       0       0\n 9     9       0       0       0      0      0      0       0       0       0\n10    10       0       0       0      0      0      0       0       0       0\n# ℹ 90 more rows\n# ℹ 9 more variables: pullouts_g6 <dbl>, pullouts_g7 <dbl>, pullouts_g8 <dbl>,\n#   disability_g6 <chr>, disability_g7 <chr>, disability_g8 <chr>,\n#   score_g6 <dbl>, score_g7 <dbl>, score_g8 <dbl>\n```\n\n\n:::\n:::\n\n\n. . .\n\n[View() data]{style='color:#D55E00'}\n\n## First `pivot_longer()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim2 %>% \n  pivot_longer(\n    cols = -1,\n    names_to = c(\"variable\", \"grade\"),\n    values_to = \"values\",\n    names_sep = \"_\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `pivot_longer()`:\n! Can't combine `male_g6` <double> and `disability_g6` <character>.\n```\n\n\n:::\n:::\n\n\n## Combine `numeric` & `character` - `as.character`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\nsim2 %>% \n  pivot_longer(\n    cols = -1,\n    names_to = c(\"variable\", \"grade\"),\n    values_to = \"values\",\n    names_sep = \"_\",\n    values_transform = list(values = as.character)) # to combine numeric & character \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,800 × 4\n     SID variable grade values\n   <dbl> <chr>    <chr> <chr> \n 1     1 male     g6    1     \n 2     1 male     g7    1     \n 3     1 male     g8    1     \n 4     1 ell      g6    0     \n 5     1 ell      g7    0     \n 6     1 ell      g8    0     \n 7     1 sped     g6    0     \n 8     1 sped     g7    0     \n 9     1 sped     g8    0     \n10     1 pullouts g6    0     \n# ℹ 1,790 more rows\n```\n\n\n:::\n:::\n\n\n## One of my favorite functions - `parse_number()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|8\"}\nsim2 %>% \n  pivot_longer(\n    cols = -1,\n    names_to = c(\"variable\", \"grade\"),\n    values_to = \"values\",\n    names_sep = \"_\",\n    values_transform = list(values = as.character)) %>% \n  mutate(grade = parse_number(grade)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,800 × 4\n     SID variable grade values\n   <dbl> <chr>    <dbl> <chr> \n 1     1 male         6 1     \n 2     1 male         7 1     \n 3     1 male         8 1     \n 4     1 ell          6 0     \n 5     1 ell          7 0     \n 6     1 ell          8 0     \n 7     1 sped         6 0     \n 8     1 sped         7 0     \n 9     1 sped         8 0     \n10     1 pullouts     6 0     \n# ℹ 1,790 more rows\n```\n\n\n:::\n:::\n\n\n## Then `pivot_wider()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|9,10,11\"}\nsim2 %>% \n  pivot_longer(\n    cols = -1,\n    names_to = c(\"variable\", \"grade\"),\n    values_to = \"values\",\n    names_sep = \"_\",\n    values_transform = list(values = as.character)) %>% \n  mutate(grade = parse_number(grade)) %>% \n  pivot_wider( \n    names_from = variable, \n    values_from = values \n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 8\n     SID grade male  ell   sped  pullouts disability score           \n   <dbl> <dbl> <chr> <chr> <chr> <chr>    <chr>      <chr>           \n 1     1     6 1     0     0     0        none       204.711224219096\n 2     1     7 1     0     0     0        none       207.641655929138\n 3     1     8 1     0     0     0        none       211.468672710232\n 4     2     6 0     0     0     1        none       212.343498534668\n 5     2     7 0     0     0     1        none       217.565910013073\n 6     2     8 0     0     0     1        none       227.036910872597\n 7     3     6 1     0     0     0        none       215.436668173264\n 8     3     7 1     0     0     0        none       217.029498660224\n 9     3     8 1     0     0     0        none       222.232373013961\n10     4     6 1     0     0     0        none       219.182457533654\n# ℹ 290 more rows\n```\n\n\n:::\n:::\n\n## \n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/40488240-4609-4dc3-8920-693e078b55ce_rw_1920.jpg?h=2e96a7e21e19c43867546498da026649)\n\n::: aside\nCredit [Allison Horst](https://allisonhorst.com/data-science-art)\n:::\n\n# Next time\n\n## Before next class\n\n* Final Project\n    + [Final Project: Draft Data Script]{style='color:#FF0000'}\n* Homework\n    + **Homework 9**\n* Reading\n    + [R4DS(2e) 17](https://r4ds.hadley.nz/factors)\n* AMA\n\n# Homework 9\n\n\n",
    "supporting": [
      "w8_tidydata_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}