{
  "hash": "cec2ac78c31ba1c763131f26efa4e3be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 7: Mutating Joins\"\nauthor: \"Joe Nese\"\ninstitute: \"University of Oregon<br>Fall 2024\"\nformat:\n  revealjs: \n    theme: default\n    highlight-style: github\n    incremental: false\n    fig-width: 9\n    fig-height: 3.5\n    scrollable: true\n    multiplex: true\nexecute: \n  echo: true\n  warning: false\nembed-resources: true\n---\n\n\n\n\n# Homework Review\n\nHomework 6\n\nHomework 7\n\n# Mutating Joins\n\nWeek 7\n\n## [Celebrate yourself!]{style='color:#FFFFFF'} {background-image=\"https://media4.giphy.com/media/y3FzofnwM97ngxeO3o/giphy.gif?cid=ecf05e47v3d6hztnq52lqaoop57dz9eetu5kfr4xckfhp37j&ep=v1_gifs_search&rid=giphy.gif&ct=g\"}\n\n## Agenda {.smaller}\n\n* `bind_rows()`\n* `*_join()`\n\n**Overall Purpose**\n\n* Understand and be able to identify keys\n* Understand different types of mutating joins\n    + `left_join()`\n    + `right_join()`\n    + one-to-one\n    + one-to-many\n* Understand some ways joins fail\n\n## A bit about joins\n\n* Also data \"merge\"\n* Today we'll talk about  **mutating joins**\n* Mutating joins add columns to a dataset\n* Mutating joins are the most common, but **filtering joins** can be very powerful\n\n. . .\n\n**What if I want to add rows?**\n\n* Not technically a join (no key involved)\n* Let's take a look\n\n## Binding rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng3 <- tibble(sid = 1:3, \n             grade = rep(3, 3), \n             score = as.integer(rnorm(3, 200, 10)))\ng4 <- tibble(sid = 9:11, \n             grade = rep(4, 3), \n             score = as.integer(rnorm(3, 200, 10)))\n```\n:::\n\n\n##\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    sid grade score\n  <int> <dbl> <int>\n1     1     3   209\n2     2     3   193\n3     3     3   202\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    sid grade score\n  <int> <dbl> <int>\n1     9     4   197\n2    10     4   209\n3    11     4   192\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n## `bind_rows()`\n\n* In examples like the previous data sets, we just want to combine the data by **stacking the rows**\n* Data have same (or approximately same) columns\n* We can do so with `bind_rows()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# output-location: fragment\nbind_rows(g3, g4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n    sid grade score\n  <int> <dbl> <int>\n1     1     3   209\n2     2     3   193\n3     3     3   202\n4     9     4   197\n5    10     4   209\n6    11     4   192\n```\n\n\n:::\n:::\n\n\n## `dplyr::bind_rows()`\n\n* an efficient way to bind many data frames into one, by stacking rows\n    + can bind multiple datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\none <- mtcars[1:4, ]\ntwo <- mtcars[6:10, ]\nthree <- mtcars[12:14, ]\n\nbind_rows(one, two, three)\n```\n:::\n\n  \n* like joining (merging) data frames that have the same columns\n* columns don't need to match when row-binding\n\n## Optional `.id` argument\n\n* What if we knew the grade, but didn't have a variable in each dataset already?\n* Use `.id` to add an index for each dataset\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbind_rows(select(g3, -grade), select(g4, -grade), .id = \"dataset\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  dataset   sid score\n  <chr>   <int> <int>\n1 1           1   209\n2 1           2   193\n3 1           3   202\n4 2           9   197\n5 2          10   209\n6 2          11   192\n```\n\n\n:::\n:::\n\n\n## Recode `.id` column\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbind_rows(select(g3, -grade), select(g4, -grade), .id = \"dataset\") %>%\n  mutate(grade = ifelse(dataset == 1, 3, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  dataset   sid score grade\n  <chr>   <int> <int> <dbl>\n1 1           1   209     3\n2 1           2   193     3\n3 1           3   202     3\n4 2           9   197     4\n5 2          10   209     4\n6 2          11   192     4\n```\n\n\n:::\n:::\n\n\n## Even better \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbind_rows(select(g3, -grade), select(g4, -grade), .id = \"grade\") %>% \n  mutate(grade = ifelse(grade == 1, 3, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  grade   sid score\n  <dbl> <int> <int>\n1     3     1   209\n2     3     2   193\n3     3     3   202\n4     4     9   197\n5     4    10   209\n6     4    11   192\n```\n\n\n:::\n:::\n\n\n## What if columns don't match exactly?\n\nPads with `NA`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbind_rows(g3, g4[ ,-3], .id = \"dataset\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  dataset   sid grade score\n  <chr>   <int> <dbl> <int>\n1 1           1     3   209\n2 1           2     3   193\n3 1           3     3   202\n4 2           9     4    NA\n5 2          10     4    NA\n6 2          11     4    NA\n```\n\n\n:::\n:::\n\n\n## You can also `bind_cols()` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread <- tibble(sid = 1:3, \n             read = as.integer(rnorm(3, 200,10)))\nmath <- tibble(math = as.integer(rnorm(3, 200,10)))\n```\n:::\n\n\n## \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    sid  read\n  <int> <int>\n1     1   205\n2     2   173\n3     3   185\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmath\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n   math\n  <int>\n1   200\n2   208\n3   207\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n## `bind_cols()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbind_cols(read, math)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    sid  read  math\n  <int> <int> <int>\n1     1   205   200\n2     2   173   208\n3     3   185   207\n```\n\n\n:::\n:::\n\n\n# Joins\n\n(not to be confused with row binding)\n\n## Keys {.smaller}\n\n* Uniquely identify rows in a dataset\n\n. . .\n\n* Variable(s) in common between two datasets to be joined\n    + A key can be more than one variable\n\n. . .\n\n**Types of keys**\n\n* Small distinction that you probably won't have to worry about much, but is\nworth mentioning:\n    + **Primary keys**: uniquely identify observations in *their* dataset\n    + **Foreign keys**: uniquely identify observations in *other* datasets\n\n\n## What's the primary key here? \n\nFirst, let's break down the code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\nlibrary(here)\nlibrary(tidyverse)\necls <- import(here(\"data\", \"ecls-k_samp.sav\")) %>% \n  as_tibble() %>% \n  characterize()\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 984 × 33\n   child_id teacher_id school_id k_type school_type sex   ethnic famtype numsibs\n   <chr>    <chr>      <chr>     <chr>  <chr>       <chr> <chr>  <chr>     <dbl>\n 1 0842021C 0842T02    0842      full-… public      male  BLACK… BIOLOG…       1\n 2 0905002C 0905T01    0905      full-… private     male  ASIAN  BIOLOG…       1\n 3 0150012C 0150T01    0150      full-… private     fema… BLACK… BIOLOG…       4\n 4 0556009C 0556T01    0556      full-… private     fema… HISPA… BIOLOG…       0\n 5 0089013C 0089T04    0089      full-… public      male  WHITE… BIOLOG…       4\n 6 1217001C 1217T13    1217      half-… public      fema… NATIV… BIOLOG…       0\n 7 1092008C 1092T01    1092      half-… public      fema… HISPA… BIOLOG…       2\n 8 0083007C 0083T16    0083      full-… public      male  WHITE… BIOLOG…       1\n 9 1091005C 1091T02    1091      half-… private     male  WHITE… BIOLOG…       0\n10 2006006C 2006T01    2006      full-… private     male  WHITE… BIOLOG…       1\n# ℹ 974 more rows\n# ℹ 24 more variables: SES_cont <dbl>, SES_cat <chr>, age <dbl>,\n#   T1RSCALE <dbl>, T1MSCALE <dbl>, T1GSCALE <dbl>, T2RSCALE <dbl>,\n#   T2MSCALE <dbl>, T2GSCALE <dbl>, IRTreadgain <dbl>, IRTmathgain <dbl>,\n#   IRTgkgain <dbl>, T1ARSLIT <dbl>, T1ARSMAT <dbl>, T1ARSGEN <dbl>,\n#   T2ARSLIT <dbl>, T2ARSMAT <dbl>, T2ARSGEN <dbl>, ARSlitgain <dbl>,\n#   ARSmathgain <dbl>, ARSgkgain <dbl>, testdate1 <date>, testdate2 <date>, …\n```\n\n\n:::\n:::\n\n\n## Let's verify the key\n\n\n::: {.cell}\n\n```{.r .cell-code}\necls %>% \n  count(child_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 984 × 2\n   child_id     n\n   <chr>    <int>\n 1 0001010C     1\n 2 0002010C     1\n 3 0009005C     1\n 4 0009014C     1\n 5 0009026C     1\n 6 0013003C     1\n 7 0016004C     1\n 8 0016009C     1\n 9 0022005C     1\n10 0022014C     1\n# ℹ 974 more rows\n```\n\n\n:::\n:::\n\n\n## Let's verify the key\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\necls %>% \n  count(child_id) %>%\n  arrange(desc(n)) %>% \n  slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  child_id     n\n  <chr>    <int>\n1 0001010C     1\n2 0002010C     1\n3 0009005C     1\n```\n\n\n:::\n:::\n\n\n. . .\n\n**[EVEN BETTER]{style='color:#F0E442'}**\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\necls %>% \n  count(child_id) %>%\n  filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 2\n# ℹ 2 variables: child_id <chr>, n <int>\n```\n\n\n:::\n:::\n\n\n## What about the key here?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome_ineq <- read_csv(here(\"data\", \"incomeInequality_tidy.csv\"))\n\nhead(income_ineq, n = 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 6\n    Year Number.thousands realGDPperCap PopulationK percentile   income\n   <dbl>            <dbl>         <dbl>       <dbl>      <dbl>    <dbl>\n 1  1947            37237        14117.      144126       20     14243 \n 2  1947            37237        14117.      144126       40     22984 \n 3  1947            37237        14117.      144126       60     31166 \n 4  1947            37237        14117.      144126       80     44223 \n 5  1947            37237        14117.      144126       50     26764.\n 6  1947            37237        14117.      144126       90     41477 \n 7  1947            37237        14117.      144126       95     54172 \n 8  1947            37237        14117.      144126       99    134415 \n 9  1947            37237        14117.      144126       99.5  203001 \n10  1947            37237        14117.      144126       99.9  479022 \n11  1947            37237        14117.      144126      100.  1584506 \n12  1948            38624        14452.      146631       20     13779 \n13  1948            38624        14452.      146631       40     22655 \n14  1948            38624        14452.      146631       60     30248 \n15  1948            38624        14452.      146631       80     42196 \n```\n\n\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nincome_ineq %>% \n    count(Year, percentile) %>% \n    filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 3\n# ℹ 3 variables: Year <dbl>, percentile <dbl>, n <int>\n```\n\n\n:::\n:::\n\n\n## Sometimes there is no key {.smaller}\n\nThese tables have an **implicit** key - the row numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"nycflights13\")\nlibrary(nycflights13)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nflights %>% \n  count(year, month, day, flight, tailnum) %>% \n  filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 6\n    year month   day flight tailnum     n\n   <int> <int> <int>  <int> <chr>   <int>\n 1  2013     2     9    303 <NA>        2\n 2  2013     2     9    655 <NA>        2\n 3  2013     2     9   1623 <NA>        2\n 4  2013     6     8   2269 N487WN      2\n 5  2013     6    15   2269 N230WN      2\n 6  2013     6    22   2269 N440LV      2\n 7  2013     6    29   2269 N707SA      2\n 8  2013     7     6   2269 N259WN      2\n 9  2013     8     3   2269 N446WN      2\n10  2013     8    10   2269 N478WN      2\n11  2013    12    15    398 <NA>        2\n```\n\n\n:::\n:::\n\n\n## Create a key {.smaller}\n\nIf there is no key, it's often helpful to add one\n\nThese are called *surrogate* keys\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|\"}\nflights2 <- flights %>% \n  rowid_to_column()\n\nflights2 %>% \n  select(1:3, ncol(flights))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n   rowid  year month minute\n   <int> <int> <int>  <dbl>\n 1     1  2013     1     15\n 2     2  2013     1     29\n 3     3  2013     1     40\n 4     4  2013     1     45\n 5     5  2013     1      0\n 6     6  2013     1     58\n 7     7  2013     1      0\n 8     8  2013     1      0\n 9     9  2013     1      0\n10    10  2013     1      0\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n# Mutating joins\n\n## Mutating `*_joins()`\n\n* In `{tidyverse}`, we use `mutate()` to create new variables within a dataset\n\n. . .\n\n* A mutating join works similarly, in that we're adding new variables to the existing dataset through a join\n\n. . .\n\n* **Join**: Two tables of data merged by a common key\n\n## Four types of joins\n\n`left_join`\n: keep all the data in the **left** dataset, drop any non-matching cases from the right dataset\n\n. . .\n\n`right_join`\n: keep all the data in the **right** dataset, drop any non-matching cases from the left dataset\n\n. . .\n\n`inner_join`\n: keep **only** data that matches in <b>both</b> datasets\n\n. . .\n\n`full_join`\n: keep **all** the data in <b>both</b> datasets (also sometimes referred to as an *outer* join)\n\n## Four types of joins\n\n![](./images/joins.png)\n\n## Four types of joins\n\n**Mutating joins**\n\n`left_join`\n**left** dataset, drop any non-matching cases from the right dataset\n\n`right_join`\n: keep all the data in the **right** dataset, drop any non-matching cases from the left dataset\n\n. . .\n\n**Filtering joins**\n\n`inner_join`\n: keep **only** data that matches in <b>both</b> datasets\n\n`full_join`\n: keep **all** the data in <b>both</b> datasets (also sometimes referred to as an *outer* join)\n\n## We're going to focus on\n\n**Mutating joins**\n\n`left_join`\n: keep all the data in the **left** dataset, drop any non-matching cases from the right dataset\n\n`right_join`\n: keep all the data in the **right** dataset, drop any non-matching cases from the left dataset\n\n## Using joins to recode\n\nSay you have a dataset like this\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|1|2,3|4|5|6|7\"}\nset.seed(1)\ndisab_codes <- c(\"00\", \"10\", \"20\", \"40\", \"43\", \"50\", \"60\", \n                 \"70\", \"74\", \"80\", \"82\", \"90\", \"96\", \"98\")\ndis_tbl <- tibble(\n  sid = 1:200,\n  dis_code = sample(disab_codes, 200, replace = TRUE),\n  score = as.integer(rnorm(200, 200, 10))\n  )\ndis_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 200 × 3\n     sid dis_code score\n   <int> <chr>    <int>\n 1     1 74         190\n 2     2 40         200\n 3     3 60         200\n 4     4 00         183\n 5     5 10         210\n 6     6 96         188\n 7     7 60         203\n 8     8 82         204\n 9     9 98         201\n10    10 10         198\n# ℹ 190 more rows\n```\n\n\n:::\n:::\n\n\n## Codes {.smaller}\n\nAnd you want to merge it with data like this\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 20px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Code </th>\n   <th style=\"text-align:left;\"> Disability </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 'Not Applicable' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:left;\"> 'Intellectual Disability' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:left;\"> 'Hearing Impairment' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:left;\"> 'Visual Impairment' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 43 </td>\n   <td style=\"text-align:left;\"> 'Deaf-Blindness' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:left;\"> 'Communication Disorder' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:left;\"> 'Emotional Disturbance' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 70 </td>\n   <td style=\"text-align:left;\"> 'Orthopedic Impairment' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 74 </td>\n   <td style=\"text-align:left;\"> 'Traumatic Brain Injury' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 80 </td>\n   <td style=\"text-align:left;\"> 'Other Health Impairments' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 82 </td>\n   <td style=\"text-align:left;\"> 'Autism Spectrum Disorder' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 90 </td>\n   <td style=\"text-align:left;\"> 'Specific Learning Disability' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 96 </td>\n   <td style=\"text-align:left;\"> 'Developmental Delay 0-2yr' </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 98 </td>\n   <td style=\"text-align:left;\"> 'Developmental Delay 3-4yr' </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Recode method\n\nUsing `case_when()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndis_tbl %>% \n  mutate(disability = case_when(\n    dis_code == \"10\" ~ \"Intellectual Disability\",\n    dis_code == \"20\" ~ 'Hearing Impairment',\n    ...,\n    .default = \"Not Applicable\"\n    )\n  )\n```\n:::\n\n\n## Join method\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n(dis_code_tbl <- tibble(\n  dis_code = c(\n    \"00\", \"10\", \"20\", \"40\", \"43\", \"50\", \"60\",\n    \"70\", \"74\", \"80\", \"82\", \"90\", \"96\", \"98\"\n    ),\n  disability = c(\n    'Not Applicable', 'Intellectual Disability',\n    'Hearing Impairment', 'Visual Impairment',\n    'Deaf-Blindness', 'Communication Disorder',\n    'Emotional Disturbance', 'Orthopedic Impairment',\n    'Traumatic Brain Injury', 'Other Health Impairments', \n    'Autism Spectrum Disorder', 'Specific Learning Disability', \n    'Developmental Delay 0-2yr', 'Developmental Delay 3-4yr'\n    )\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 2\n   dis_code disability                  \n   <chr>    <chr>                       \n 1 00       Not Applicable              \n 2 10       Intellectual Disability     \n 3 20       Hearing Impairment          \n 4 40       Visual Impairment           \n 5 43       Deaf-Blindness              \n 6 50       Communication Disorder      \n 7 60       Emotional Disturbance       \n 8 70       Orthopedic Impairment       \n 9 74       Traumatic Brain Injury      \n10 80       Other Health Impairments    \n11 82       Autism Spectrum Disorder    \n12 90       Specific Learning Disability\n13 96       Developmental Delay 0-2yr   \n14 98       Developmental Delay 3-4yr   \n```\n\n\n:::\n:::\n\n\n## Join the tables\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(dis_tbl, dis_code_tbl)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(dis_code)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 200 × 4\n     sid dis_code score disability               \n   <int> <chr>    <int> <chr>                    \n 1     1 74         190 Traumatic Brain Injury   \n 2     2 40         200 Visual Impairment        \n 3     3 60         200 Emotional Disturbance    \n 4     4 00         183 Not Applicable           \n 5     5 10         210 Intellectual Disability  \n 6     6 96         188 Developmental Delay 0-2yr\n 7     7 60         203 Emotional Disturbance    \n 8     8 82         204 Autism Spectrum Disorder \n 9     9 98         201 Developmental Delay 3-4yr\n10    10 10         198 Intellectual Disability  \n# ℹ 190 more rows\n```\n\n\n:::\n:::\n\n\n# Imperfect key match?\n\n## Consider the following {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrl <- tibble(key = 1:3, frl = rbinom(3, 1, .5))\n\nsped <- tibble(key = c(1, 2, 4), sped = rbinom(3, 1, .5))\n```\n:::\n\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nfrl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key   frl\n  <int> <int>\n1     1     0\n2     2     1\n3     3     0\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nsped\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key  sped\n  <dbl> <int>\n1     1     0\n2     2     1\n3     4     0\n```\n\n\n:::\n:::\n\n\n## Consider the following\n\n`left_join()`?\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(frl, sped)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    key   frl  sped\n  <dbl> <int> <int>\n1     1     0     0\n2     2     1     1\n3     3     0    NA\n```\n\n\n:::\n:::\n\n\n. . .\n\n`right_join()`?\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nright_join(frl, sped)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    key   frl  sped\n  <dbl> <int> <int>\n1     1     0     0\n2     2     1     1\n3     4    NA     0\n```\n\n\n:::\n:::\n\n\n## ![](https://d33wubrfki0l68.cloudfront.net/9c12ca9e12ed26a7c5d2aa08e36d2ac4fb593f1e/79980/diagrams/join-outer.png)\n\n::: aside\n[From R4DS](https://r4ds.had.co.nz)]\n:::\n\n## Animations\n\nAll of the following animations were created by Garrick Aden-Buie and can be found [here](https://github.com/gadenbuie/tidyexplain)\n\n\n##\n    \n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/left-join.gif)\n\n##\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/right-join.gif)\n\n## What if the key is not unique?\n\n* Not an issue, as long as they are unique in **one** of the tables\n    + In this case, it's called a **one-to-many** join\n    + We saw this when we joined disability code with disability\n\n\n![](./images/one_to_many.png)\n\n##\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/left-join-extra.gif)\n\n## Example\n\n:::: {.columns}\n\n::: {.colum width = \"50%\"}\n\nStudent-level data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(stu <- tibble(\n  sid = 1:9,\n  scid = c(1, 1, 1, 1, 2, 2, 3, 3, 3),\n  score = c(10, 12, 15, 8,  9, 11, 12, 15, 17)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n    sid  scid score\n  <int> <dbl> <dbl>\n1     1     1    10\n2     2     1    12\n3     3     1    15\n4     4     1     8\n5     5     2     9\n6     6     2    11\n7     7     3    12\n8     8     3    15\n9     9     3    17\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.colum width = \"50%\" .fragment}\n\nSchool-level data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(schl <- tibble(\n  scid = 1:3,\n  stu_tch_ratio = c(22.05, 31.14, 24.87),\n  per_pupil_spending = c(15741.08, 11732.24, 13027.88)\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n   scid stu_tch_ratio per_pupil_spending\n  <int>         <dbl>              <dbl>\n1     1          22.0             15741.\n2     2          31.1             11732.\n3     3          24.9             13028.\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n## One to many\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(stu, schl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 5\n    sid  scid score stu_tch_ratio per_pupil_spending\n  <int> <dbl> <dbl>         <dbl>              <dbl>\n1     1     1    10          22.0             15741.\n2     2     1    12          22.0             15741.\n3     3     1    15          22.0             15741.\n4     4     1     8          22.0             15741.\n5     5     2     9          31.1             11732.\n6     6     2    11          31.1             11732.\n7     7     3    12          24.9             13028.\n8     8     3    15          24.9             13028.\n9     9     3    17          24.9             13028.\n```\n\n\n:::\n:::\n\n\n## What if key is not unique to either table?\n\nGenerally this is an error\n\nResult is probably not going to be what you want\n\n## Example\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nseasonal_means <- tibble(\n  scid = rep(1:3, each = 3),\n  season = rep(c(\"fall\", \"winter\", \"spring\"), 3),\n  mean = rnorm(3*3)\n)\nseasonal_means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n   scid season   mean\n  <int> <chr>   <dbl>\n1     1 fall    0.345\n2     1 winter  1.54 \n3     1 spring -0.330\n4     2 fall    0.948\n5     2 winter -0.479\n6     2 spring -1.51 \n7     3 fall    0.435\n8     3 winter -0.520\n9     3 spring -0.835\n```\n\n\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(stu, seasonal_means) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 27 × 5\n     sid  scid score season   mean\n   <int> <dbl> <dbl> <chr>   <dbl>\n 1     1     1    10 fall    0.345\n 2     1     1    10 winter  1.54 \n 3     1     1    10 spring -0.330\n 4     2     1    12 fall    0.345\n 5     2     1    12 winter  1.54 \n 6     2     1    12 spring -0.330\n 7     3     1    15 fall    0.345\n 8     3     1    15 winter  1.54 \n 9     3     1    15 spring -0.330\n10     4     1     8 fall    0.345\n# ℹ 17 more rows\n```\n\n\n:::\n:::\n\n\n## How do we fix this?\n\n. . .\n\n![](https://media4.giphy.com/media/TgxSogEZU4exOupzRN/giphy.gif?cid=ecf05e4761vyz0plz2gqtplwgdbnzniwh2s2ffcxlz2gnh23&rid=giphy.gif&ct=g)\n\n. . .\n\nIn some cases, the solution is obvious, in others it is not\n\nBut **you must have at least one unique key** to join the datasets\n\n## In this case\n\nMove the dataset to wide before joining\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nseasonal_means_wide <- seasonal_means %>% \n  pivot_wider(names_from = \"season\",\n              values_from = \"mean\")\nseasonal_means_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n   scid  fall winter spring\n  <int> <dbl>  <dbl>  <dbl>\n1     1 0.345  1.54  -0.330\n2     2 0.948 -0.479 -1.51 \n3     3 0.435 -0.520 -0.835\n```\n\n\n:::\n:::\n\n\n::: aside\nWe will cover this next week\n:::\n\n## Join\n\nOne to many join\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(stu, seasonal_means_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 6\n    sid  scid score  fall winter spring\n  <int> <dbl> <dbl> <dbl>  <dbl>  <dbl>\n1     1     1    10 0.345  1.54  -0.330\n2     2     1    12 0.345  1.54  -0.330\n3     3     1    15 0.345  1.54  -0.330\n4     4     1     8 0.345  1.54  -0.330\n5     5     2     9 0.948 -0.479 -1.51 \n6     6     2    11 0.948 -0.479 -1.51 \n7     7     3    12 0.435 -0.520 -0.835\n8     8     3    15 0.435 -0.520 -0.835\n9     9     3    17 0.435 -0.520 -0.835\n```\n\n\n:::\n:::\n\n\n## Default join behavior {.smaller}\n\nBy default, the `_join` functions will use all columns with common names as keys\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 <- flights %>% \n  select(year:day, hour, origin, dest, tailnum, carrier)\n\nflights2[1:2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n   year month   day  hour origin dest  tailnum carrier\n  <int> <int> <int> <dbl> <chr>  <chr> <chr>   <chr>  \n1  2013     1     1     5 EWR    IAH   N14228  UA     \n2  2013     1     1     5 LGA    IAH   N24211  UA     \n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell highlight.output='2' output-location='fragment'}\n\n```{.r .cell-code}\nweather[1:2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 15\n  origin  year month   day  hour  temp  dewp humid wind_dir wind_speed wind_gust\n  <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>    <dbl>      <dbl>     <dbl>\n1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4         NA\n2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06        NA\n# ℹ 4 more variables: precip <dbl>, pressure <dbl>, visib <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(flights2, weather)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(year, month, day, hour, origin)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 18\n    year month   day  hour origin dest  tailnum carrier  temp  dewp humid\n   <int> <int> <int> <dbl> <chr>  <chr> <chr>   <chr>   <dbl> <dbl> <dbl>\n 1  2013     1     1     5 EWR    IAH   N14228  UA       39.0  28.0  64.4\n 2  2013     1     1     5 LGA    IAH   N24211  UA       39.9  25.0  54.8\n 3  2013     1     1     5 JFK    MIA   N619AA  AA       39.0  27.0  61.6\n 4  2013     1     1     5 JFK    BQN   N804JB  B6       39.0  27.0  61.6\n 5  2013     1     1     6 LGA    ATL   N668DN  DL       39.9  25.0  54.8\n 6  2013     1     1     5 EWR    ORD   N39463  UA       39.0  28.0  64.4\n 7  2013     1     1     6 EWR    FLL   N516JB  B6       37.9  28.0  67.2\n 8  2013     1     1     6 LGA    IAD   N829AS  EV       39.9  25.0  54.8\n 9  2013     1     1     6 JFK    MCO   N593JB  B6       37.9  27.0  64.3\n10  2013     1     1     6 LGA    ORD   N3ALAA  AA       39.9  25.0  54.8\n# ℹ 336,766 more rows\n# ℹ 7 more variables: wind_dir <dbl>, wind_speed <dbl>, wind_gust <dbl>,\n#   precip <dbl>, pressure <dbl>, visib <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n## Use only certain keys?\n\nIf we were joining *flights2* and *planes*, we would not want to use the `year` variable in the join, because **it means different things in each dataset**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(planes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  tailnum  year type               manufacturer model engines seats speed engine\n  <chr>   <int> <chr>              <chr>        <chr>   <int> <int> <int> <chr> \n1 N10156   2004 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n2 N102UW   1998 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n3 N103US   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n4 N104UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n5 N10575   2002 Fixed wing multi … EMBRAER      EMB-…       2    55    NA Turbo…\n6 N105UW   1999 Fixed wing multi … AIRBUS INDU… A320…       2   182    NA Turbo…\n```\n\n\n:::\n:::\n\n\n## Specify `*_join()` keys {.smaller}\n\nSpecify the key variables with `join_by()` (a function *not* an argument)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(flights2, planes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 15\n    year month   day  hour origin dest  tailnum carrier type  manufacturer model\n   <int> <int> <int> <dbl> <chr>  <chr> <chr>   <chr>   <chr> <chr>        <chr>\n 1  2013     1     1     5 EWR    IAH   N14228  UA      <NA>  <NA>         <NA> \n 2  2013     1     1     5 LGA    IAH   N24211  UA      <NA>  <NA>         <NA> \n 3  2013     1     1     5 JFK    MIA   N619AA  AA      <NA>  <NA>         <NA> \n 4  2013     1     1     5 JFK    BQN   N804JB  B6      <NA>  <NA>         <NA> \n 5  2013     1     1     6 LGA    ATL   N668DN  DL      <NA>  <NA>         <NA> \n 6  2013     1     1     5 EWR    ORD   N39463  UA      <NA>  <NA>         <NA> \n 7  2013     1     1     6 EWR    FLL   N516JB  B6      <NA>  <NA>         <NA> \n 8  2013     1     1     6 LGA    IAD   N829AS  EV      <NA>  <NA>         <NA> \n 9  2013     1     1     6 JFK    MCO   N593JB  B6      <NA>  <NA>         <NA> \n10  2013     1     1     6 LGA    ORD   N3ALAA  AA      <NA>  <NA>         <NA> \n# ℹ 336,766 more rows\n# ℹ 4 more variables: engines <int>, seats <int>, speed <int>, engine <chr>\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(flights2, planes, join_by(tailnum))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 16\n   year.x month   day  hour origin dest  tailnum carrier year.y type            \n    <int> <int> <int> <dbl> <chr>  <chr> <chr>   <chr>    <int> <chr>           \n 1   2013     1     1     5 EWR    IAH   N14228  UA        1999 Fixed wing mult…\n 2   2013     1     1     5 LGA    IAH   N24211  UA        1998 Fixed wing mult…\n 3   2013     1     1     5 JFK    MIA   N619AA  AA        1990 Fixed wing mult…\n 4   2013     1     1     5 JFK    BQN   N804JB  B6        2012 Fixed wing mult…\n 5   2013     1     1     6 LGA    ATL   N668DN  DL        1991 Fixed wing mult…\n 6   2013     1     1     5 EWR    ORD   N39463  UA        2012 Fixed wing mult…\n 7   2013     1     1     6 EWR    FLL   N516JB  B6        2000 Fixed wing mult…\n 8   2013     1     1     6 LGA    IAD   N829AS  EV        1998 Fixed wing mult…\n 9   2013     1     1     6 JFK    MCO   N593JB  B6        2004 Fixed wing mult…\n10   2013     1     1     6 LGA    ORD   N3ALAA  AA          NA <NA>            \n# ℹ 336,766 more rows\n# ℹ 6 more variables: manufacturer <chr>, model <chr>, engines <int>,\n#   seats <int>, speed <int>, engine <chr>\n```\n\n\n:::\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(flights2, planes, join_by(tailnum), suffix = c(\"_flights\", \"_planes\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 16\n   year_flights month   day  hour origin dest  tailnum carrier year_planes type \n          <int> <int> <int> <dbl> <chr>  <chr> <chr>   <chr>         <int> <chr>\n 1         2013     1     1     5 EWR    IAH   N14228  UA             1999 Fixe…\n 2         2013     1     1     5 LGA    IAH   N24211  UA             1998 Fixe…\n 3         2013     1     1     5 JFK    MIA   N619AA  AA             1990 Fixe…\n 4         2013     1     1     5 JFK    BQN   N804JB  B6             2012 Fixe…\n 5         2013     1     1     6 LGA    ATL   N668DN  DL             1991 Fixe…\n 6         2013     1     1     5 EWR    ORD   N39463  UA             2012 Fixe…\n 7         2013     1     1     6 EWR    FLL   N516JB  B6             2000 Fixe…\n 8         2013     1     1     6 LGA    IAD   N829AS  EV             1998 Fixe…\n 9         2013     1     1     6 JFK    MCO   N593JB  B6             2004 Fixe…\n10         2013     1     1     6 LGA    ORD   N3ALAA  AA               NA <NA> \n# ℹ 336,766 more rows\n# ℹ 6 more variables: manufacturer <chr>, model <chr>, engines <int>,\n#   seats <int>, speed <int>, engine <chr>\n```\n\n\n:::\n:::\n\n\n## Specify `*_join()` keys\n\nI like to **always** specify the `join_by()` variables\n\nMakes intent explicit\n\nHelps me review my own code\n\n## Mismatched key names\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nnames(schl)[1] <- \"school_id\"\nschl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  school_id stu_tch_ratio per_pupil_spending\n      <int>         <dbl>              <dbl>\n1         1          22.0             15741.\n2         2          31.1             11732.\n3         3          24.9             13028.\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nstu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n    sid  scid score\n  <int> <dbl> <dbl>\n1     1     1    10\n2     2     1    12\n3     3     1    15\n4     4     1     8\n5     5     2     9\n6     6     2    11\n7     7     3    12\n8     8     3    15\n9     9     3    17\n```\n\n\n:::\n:::\n\n\n\n## Join with mismatched key names\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(stu, schl)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(stu, schl, join_by(scid == school_id))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 5\n    sid  scid score stu_tch_ratio per_pupil_spending\n  <int> <dbl> <dbl>         <dbl>              <dbl>\n1     1     1    10          22.0             15741.\n2     2     1    12          22.0             15741.\n3     3     1    15          22.0             15741.\n4     4     1     8          22.0             15741.\n5     5     2     9          31.1             11732.\n6     6     2    11          31.1             11732.\n7     7     3    12          24.9             13028.\n8     8     3    15          24.9             13028.\n9     9     3    17          24.9             13028.\n```\n\n\n:::\n:::\n\n\n## `join_by()`\n\nYou can read it out loud as \"where x is equal to y\", just like in other logical statements where `==` is pronounced as \"is equal to\"\n\n# Next time\n\n## Before next class\n\n* Homework\n    + **Homework 8**\n* Supplemental Learning\n    + [Codecademy: Data Cleaning in R](https://www.codecademy.com/courses/learn-r/lessons/r-data-cleaning)\n* Reading\n    + [R4DS(2e) 12](https://r4ds.had.co.nz/tidy-data.html)\n    + [Wickham (2014)](http://www.jstatsoft.org/v59/i10/paper)\n    + [R-Ladies Sydney. CleanItUp 5](https://rladiessydney.org/courses/ryouwithme/02-cleanitup-5/)\n\n# Homework 8\n\n# Final Project\n\n## Final Project\n\nFinal paper: Quarto document\n\n* Be fully reproducible\n    + This implies the data are open\n* Be a collaborative project hosted on GitHub\n* Move data from its raw \"messy\" format to a tidy data format\n* Include at least two exploratory plots\n* Include at least summary statistics of the data in tables, although fitted models are also encouraged\n\n## Final Project - Dates\n\n* **Week 9  (11/27)**: Data prep script due\n\n* **Week 10  (12/4)**:  Peer review due\n\n* **Week 10 (12/4)**:  Final project presentations\n\n* **Week 11 (12/10)**: Final Paper due\n\n## Final Project - Data Prep Script\n\n* Expected to be a work in progress\n* Provided to your peers so they can learn from you as much as you can learn from their feedback\n\n**Peer Review**\n\n* Understand the purpose of the exercise\n* Conducted as a professional product\n* Should be **very** encouraging \n* Zero tolerance policy for inappropriate comments\n\n## Final Project – Presentation\n\nGroups are expected to present for approximately 15 minutes (split evenly among members). Group order randomly assigned. \n\nPresentation cover the following:\n\n* Share your journey (everyone, at least for a minute or two)\n* Discuss challenges you had along the way\n* Celebrate your successes\n* Discuss challenges you are still facing\n* Discuss substantive findings\n* Show off your cool figures!\n* Discuss next `R` hurdle you want to address\n\n## Final Project – Presentation Scoring Rubric\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic table\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto; font-size: 14px; '>\n<caption style=\"font-size: initial !important;\"><b>Final Presentation Rubric</b></caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Criteria </th>\n   <th style=\"text-align:right;\"> Points possible </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Challenges faced along the way </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Victories and things to celebrate </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Challenges you are still facing </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Substantive findings/interpretations </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Next R hurdle to tackle </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Total </td>\n   <td style=\"text-align:right;font-weight: bold;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Final Project – Paper\n\n* Quarto document\n    + Abstract, Intro, Methods, Results, Discussion, References\n    + Should be brief: 3,500 words max \n* No code displayed - should look similar to a manuscript being submitted for publication\n* Include at least 1 table\n* Include at least 2 plots\n* Should be fully open, reproducible, and housed on GitHub\n    + I should be able to clone your repository, open the R Studio Project, and reproduce the full manuscript (by knitting the Quarto doc)\n\n## Final Paper - Scoring Rubric\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"bodlewfstl\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:80%;\">\n<style>#bodlewfstl table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#bodlewfstl thead, #bodlewfstl tbody, #bodlewfstl tfoot, #bodlewfstl tr, #bodlewfstl td, #bodlewfstl th {\n  border-style: none;\n}\n\n#bodlewfstl p {\n  margin: 0;\n  padding: 0;\n}\n\n#bodlewfstl .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 10px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#bodlewfstl .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#bodlewfstl .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#bodlewfstl .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #0072B2;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#bodlewfstl .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #0072B2;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#bodlewfstl .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#bodlewfstl .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#bodlewfstl .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#bodlewfstl .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#bodlewfstl .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#bodlewfstl .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bodlewfstl .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#bodlewfstl .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#bodlewfstl .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#bodlewfstl .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bodlewfstl .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#bodlewfstl .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#bodlewfstl .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#bodlewfstl .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bodlewfstl .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#bodlewfstl .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bodlewfstl .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#bodlewfstl .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bodlewfstl .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bodlewfstl .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bodlewfstl .gt_left {\n  text-align: left;\n}\n\n#bodlewfstl .gt_center {\n  text-align: center;\n}\n\n#bodlewfstl .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#bodlewfstl .gt_font_normal {\n  font-weight: normal;\n}\n\n#bodlewfstl .gt_font_bold {\n  font-weight: bold;\n}\n\n#bodlewfstl .gt_font_italic {\n  font-style: italic;\n}\n\n#bodlewfstl .gt_super {\n  font-size: 65%;\n}\n\n#bodlewfstl .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#bodlewfstl .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#bodlewfstl .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#bodlewfstl .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#bodlewfstl .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#bodlewfstl .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#bodlewfstl .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#bodlewfstl .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#bodlewfstl div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Criteria\">Criteria</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Points-Possible\">Points Possible</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"V3JpdGluZw==\"><span class='gt_from_md'>Writing</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"QWJzdHJhY3Q=\"><span class='gt_from_md'>Abstract</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"SW50cm9kdWN0aW9u\"><span class='gt_from_md'>Introduction</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"TWV0aG9kcw==\"><span class='gt_from_md'>Methods</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"UmVzdWx0cw==\"><span class='gt_from_md'>Results</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"RGlzY3Vzc2lvbg==\"><span class='gt_from_md'>Discussion</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"UmVmZXJlbmNlcw==\"><span class='gt_from_md'>References</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"MjU=\"><span class='gt_from_md'>25</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"Q29kZQ==\"><span class='gt_from_md'>Code</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"RG9jdW1lbnQgaXMgZnVsbHkgcmVwcm9kdWNpYmxl\"><span class='gt_from_md'>Document is fully reproducible</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"MTAgKDUgcHRzIGVhY2gp\"><span class='gt_from_md'>10 (5 pts each)</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"RGVtb25zdHJhdGUgdXNlIG9mIGlubGluZSBjb2Rl\"><span class='gt_from_md'>Demonstrate use of inline code</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"QXQgbGVhc3QgdHdvIGRhdGEgdmlzdWFsaXphdGlvbnM=\"><span class='gt_from_md'>At least two data visualizations</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"RGVtb25zdHJhdGUgdGlkeWluZyBtZXNzeSBkYXRhIHVzaW5nOg==\"><span class='gt_from_md'>Demonstrate tidying messy data using:</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"PGNvZGU+cGl2b3RfbG9uZ2VyKCk8L2NvZGU+\"><span class='gt_from_md'><code>pivot_longer()</code></span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"PGNvZGU+bXV0YXRlKCk8L2NvZGU+\"><span class='gt_from_md'><code>mutate()</code></span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"MTA=\"><span class='gt_from_md'>10</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"PGNvZGU+c2VsZWN0KClgYCBhbmQgYGBmaWx0ZXIoKTwvY29kZT4=\"><span class='gt_from_md'><code>select()`` and ``filter()</code></span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"PGNvZGU+cGl2b3Rfd2lkZXIoKTwvY29kZT4=\"><span class='gt_from_md'><code>pivot_wider()</code></span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"QXQgbGVhc3Qgb25lIHRhYmxlIG9mIGRlc2NyaXB0aXZlIHN0YXRpc3RpY3M=\"><span class='gt_from_md'>At least one table of descriptive statistics</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"MTEw\"><span class='gt_from_md'>110</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"PGNvZGU+Z3JvdXBfYnkoKTwvY29kZT4=\"><span class='gt_from_md'><code>group_by()</code></span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"PGNvZGU+c3VtbWFyaXplKCk8L2NvZGU+\"><span class='gt_from_md'><code>summarize()</code></span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n    <tr><td headers=\"Criteria\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"VG90YWw=\"><span class='gt_from_md'>Total</span></span></td>\n<td headers=\"Points Possible\" class=\"gt_row gt_left\" style=\"font-weight: bold; background-color: #FFFFFF;\"><span data-qmd-base64=\"NQ==\"><span class='gt_from_md'>5</span></span></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n## Final Project\n\nThe following functions: \n\n* `pivot_longer()`\n* `mutate()`\n* `select()`\n* `filter()`\n* `pivot_wider()`\n* `group_by()`\n* `summarize()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}