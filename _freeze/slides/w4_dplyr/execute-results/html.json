{
  "hash": "d43fbdd17026bfd360db53f06650dd7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 4: Data Wrangling\"\nsubtitle: \"`{dplyr}`\"\nauthor: \"Joe Nese\"\ninstitute: \"University of Oregon<br>Fall 2024\"\nformat:\n  revealjs: \n    theme: default\n    highlight-style: github\n    incremental: false\n    fig-width: 9\n    fig-height: 3.5\n    scrollable: true\n    multiplex: true\n    embed-resources: true\nexecute: \n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n## Housekeeping {.smaller}\n\n- Midway Student Experience Survey\n    + now open\n    + Canvas: UO Course Surveys (left sidebar)\n- [Final Project Outline]{style='color:#FF0000'}\n    + Due next week (10/30)\n  \n> The outline should include a description of the data to be used, a discussion of what preparatory work will need to be done, and how the requirements of the final project will be met. The outline is intended to be low-stakes and is primarily designed to be a means for you to obtain feedback on the feasibility of the project and areas to consider.\n\n# Homework Review\n\nHomeworks 2 & 3\n\n# Data Wrangling with `{dplyr}`\n\nWeek 4\n\n##\n\n![](https://www.ltd.org/files/library/bus-with-rainbow_lb.jpg)\n\n##\n\n\n![](https://images.unsplash.com/photo-1572013343866-dfdb9b416810?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8dGF4aXxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=500&q=60)\n\n## Agenda {.smaller}\n\n- Introduce common `{dplyr}` functions\n    + piping `{dplyr}` functions\n  + helper functions\n- Introduce complimentary functions\n    + `ifelse()`\n    + `case_when()`\n  \n![](https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/#quality-of-life-improvements-to-case_when-and-if_else)\n\n**Learning Objectives**\n\n- Understand basic data wrangling and transformations\n    + `select()`\n    + `filter()`\n    + `arrange()`\n    + `group_by()`\n    + `summarize()`\n    + `recode()` & `rename()`\n- Be able to pipe these functions to efficiently wrangle data\n\n## \n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/b467ee99-87e3-4663-ae27-aaf027f940ce_rw_1920.png?h=0573cb8b960ba2f2c8486188761f03e0){width=\"70%\"}\n\n::: aside\nCredit [Allison Horst](https://allisonhorst.com/data-science-art)\n:::\n\n## Providing grammar for:\n\n* Graphics \n  + `{ggplot2}`\n* Data manipulations \n  + `{dplyr}`\n  + `{tidyr}`\n* Expanding area of specialized topics\n  + `{lubridate}`\n  + `{glue}`\n  + `{tidymodels}`\n* Many more...\n\n## Providing grammar for:\n\n* Graphics \n  + `{ggplot2}`\n* Data manipulations\n  + <mark>`{dplyr}`</mark>\n  + `{tidyr}`\n* Expanding area of specialized topics\n  + `{lubridate}`\n  + `{glue}`\n  + `{tidymodels}`\n* Many more...\n\n\n# {dplyr}\n\n## `{dplyr}` ![](https://d33wubrfki0l68.cloudfront.net/621a9c8c5d7b47c4b6d72e8f01f28d14310e8370/193fc/css/images/hex/dplyr.png){fig-align=\"right\" width=\"10%\"} {.smaller}\n\nA grammar for data wrangling (verbs!)\n\nTake a couple minutes with your neighbor to guess what the following functions do:\n\n* `select()`\n* `filter()`\n* `mutate()`\n* `arrange()`\n* `summarize()`\n* `group_by()`\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_c2fa0925\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## `{dplyr}` {.smaller}\n\nA grammar for data wrangling (verbs!)\n\n`select()`\n\n::: {.fragment}\na subset of **columns**\n:::\n\n`filter()`\n\n::: {.fragment}\na subset of **rows**\n:::\n\n`mutate()`\n\n::: {.fragment}\n**add** a new column or **modify** an existing column\n:::\n\n`arrange()`\n\n::: {.fragment}\n**sort** rows in ascending/descending order\n:::\n\n`summarize()`\n\n::: {.fragment}\na new column created according to other columns\nfor example: `mean()` or `sd()`\n    + often used with...\n:::\n\n`group_by()`\n\n::: {.fragment}\n**grouping** column(s)\n:::\n\n## Arguments\n\n* **`{dplyr}` always takes a data frame (tibble) as the first argument**\n    + just like `{ggplot}`\n\n* subsequent functions tell `{dplyr}` what to do with the data frame\n\n* each function applied returns the modified data frame\n\n\n# `select()`\n\n## `select()`\n\nchoose columns\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame %>% \n  select(a, c)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig1.png)\n:::\n\n::::\n\n::: aside\nImage from [Software Carpentry](https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig1.png)\n:::\n\n## Examples\n\nLet’s start with the presidential dataset from the `{mdsr}` package\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n#install.packages(\"mdsr\")\nlibrary(mdsr)\n\npresidential\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   name       start      end        party     \n   <chr>      <date>     <date>     <chr>     \n 1 Eisenhower 1953-01-20 1961-01-20 Republican\n 2 Kennedy    1961-01-20 1963-11-22 Democratic\n 3 Johnson    1963-11-22 1969-01-20 Democratic\n 4 Nixon      1969-01-20 1974-08-09 Republican\n 5 Ford       1974-08-09 1977-01-20 Republican\n 6 Carter     1977-01-20 1981-01-20 Democratic\n 7 Reagan     1981-01-20 1989-01-20 Republican\n 8 Bush       1989-01-20 1993-01-20 Republican\n 9 Clinton    1993-01-20 2001-01-20 Democratic\n10 Bush       2001-01-20 2009-01-20 Republican\n11 Obama      2009-01-20 2017-01-20 Democratic\n12 Trump      2017-01-20 2021-01-20 Republican\n```\n\n\n:::\n:::\n\n\n## `select` president *name* and *party*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(presidential, name, party)\n```\n:::\n\n\n. . .\n\n**OR** more typically\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tselect(name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   name       party     \n   <chr>      <chr>     \n 1 Eisenhower Republican\n 2 Kennedy    Democratic\n 3 Johnson    Democratic\n 4 Nixon      Republican\n 5 Ford       Republican\n 6 Carter     Democratic\n 7 Reagan     Republican\n 8 Bush       Republican\n 9 Clinton    Democratic\n10 Bush       Republican\n11 Obama      Democratic\n12 Trump      Republican\n```\n\n\n:::\n:::\n\n\n## Negation `-`\n\nDon't select variable(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tselect(-start)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   name       end        party     \n   <chr>      <date>     <chr>     \n 1 Eisenhower 1961-01-20 Republican\n 2 Kennedy    1963-11-22 Democratic\n 3 Johnson    1969-01-20 Democratic\n 4 Nixon      1974-08-09 Republican\n 5 Ford       1977-01-20 Republican\n 6 Carter     1981-01-20 Democratic\n 7 Reagan     1989-01-20 Republican\n 8 Bush       1993-01-20 Republican\n 9 Clinton    2001-01-20 Democratic\n10 Bush       2009-01-20 Republican\n11 Obama      2017-01-20 Democratic\n12 Trump      2021-01-20 Republican\n```\n\n\n:::\n:::\n\n\n## Negation `-`\n\nDon't select variable(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tselect(-start, -end)\n```\n:::\n\n\n**OR**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tselect(-c(start, end))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   name       party     \n   <chr>      <chr>     \n 1 Eisenhower Republican\n 2 Kennedy    Democratic\n 3 Johnson    Democratic\n 4 Nixon      Republican\n 5 Ford       Republican\n 6 Carter     Democratic\n 7 Reagan     Republican\n 8 Bush       Republican\n 9 Clinton    Democratic\n10 Bush       Republican\n11 Obama      Democratic\n12 Trump      Republican\n```\n\n\n:::\n:::\n\n\n## Indexing\n\nLess preferable because variable orders change\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(presidential, 1:3)\n```\n:::\n\n\n**OR** more typically\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tselect(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   name       start      end       \n   <chr>      <date>     <date>    \n 1 Eisenhower 1953-01-20 1961-01-20\n 2 Kennedy    1961-01-20 1963-11-22\n 3 Johnson    1963-11-22 1969-01-20\n 4 Nixon      1969-01-20 1974-08-09\n 5 Ford       1974-08-09 1977-01-20\n 6 Carter     1977-01-20 1981-01-20\n 7 Reagan     1981-01-20 1989-01-20\n 8 Bush       1989-01-20 1993-01-20\n 9 Clinton    1993-01-20 2001-01-20\n10 Bush       2001-01-20 2009-01-20\n11 Obama      2009-01-20 2017-01-20\n12 Trump      2017-01-20 2021-01-20\n```\n\n\n:::\n:::\n\n\n## Use multiple methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tselect(name, 2, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   name       start      party     \n   <chr>      <date>     <chr>     \n 1 Eisenhower 1953-01-20 Republican\n 2 Kennedy    1961-01-20 Democratic\n 3 Johnson    1963-11-22 Democratic\n 4 Nixon      1969-01-20 Republican\n 5 Ford       1974-08-09 Republican\n 6 Carter     1977-01-20 Democratic\n 7 Reagan     1981-01-20 Republican\n 8 Bush       1989-01-20 Republican\n 9 Clinton    1993-01-20 Democratic\n10 Bush       2001-01-20 Republican\n11 Obama      2009-01-20 Democratic\n12 Trump      2017-01-20 Republican\n```\n\n\n:::\n:::\n\n\n## Use `select` to order columns\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(fivethirtyeight)\ncollege_grad_students\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 173 × 22\n   major_code major     major_category grad_total grad_sample_size grad_employed\n        <int> <chr>     <chr>               <int>            <int>         <int>\n 1       5601 Construc… Industrial Ar…       9173              200          7098\n 2       6004 Commerci… Arts                53864              882         40492\n 3       6211 Hospital… Business            24417              437         18368\n 4       2201 Cosmetol… Industrial Ar…       5411               72          3590\n 5       2001 Communic… Computers & M…       9109              171          7512\n 6       3201 Court Re… Law & Public …       1542               22          1008\n 7       6206 Marketin… Business           190996             3738        151570\n 8       1101 Agricult… Agriculture &…      17488              386         13104\n 9       2101 Computer… Computers & M…       5611               98          4716\n10       1904 Advertis… Communication…      33928              688         28517\n# ℹ 163 more rows\n# ℹ 16 more variables: grad_employed_fulltime_yearround <int>,\n#   grad_unemployed <int>, grad_unemployment_rate <dbl>, grad_p25th <dbl>,\n#   grad_median <dbl>, grad_p75th <int>, nongrad_total <int>,\n#   nongrad_employed <int>, nongrad_employed_fulltime_yearround <int>,\n#   nongrad_unemployed <int>, nongrad_unemployment_rate <dbl>,\n#   nongrad_p25th <dbl>, nongrad_median <dbl>, nongrad_p75th <dbl>, …\n```\n\n\n:::\n:::\n\n\n## `select()` [helper](https://tidyselect.r-lib.org/reference/select_helpers.html) functions\n\n* `everything()`\n* `starts_with()`\n* `ends_with()`\n* `contains()`\n* `all_of()`\n* `any_of()`\n\n## Helper functions\n\nFirst: this code may not work for you - why?\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nreads <- read_csv(here(\"data\", \"Project_Reads_Scores.csv\")) %>% \n  clean_names()\nreads\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 25\n   test_year      test_type test_site student_id pre_test_score pre_test_percent\n   <chr>          <chr>     <chr>     <chr>               <dbl> <chr>           \n 1 06/01/2016 12… YEAR END  VIRDEN    Virden 1               43 29%             \n 2 06/01/2016 12… YEAR END  VIRDEN    Virden 2               46 31%             \n 3 06/01/2016 12… YEAR END  VIRDEN    Virden 3               39 26%             \n 4 06/01/2016 12… YEAR END  VIRDEN    Virden 4               35 23%             \n 5 06/01/2016 12… YEAR END  VIRDEN    Virden 5               46 31%             \n 6 06/01/2016 12… YEAR END  VIRDEN    Virden 6               35 23%             \n 7 06/01/2016 12… YEAR END  VIRDEN    Virden 7               40 27%             \n 8 06/01/2016 12… YEAR END  VIRDEN    Virden 8               39 26%             \n 9 06/01/2016 12… YEAR END  VIRDEN    Virden 9               40 27%             \n10 06/01/2016 12… YEAR END  VIRDEN    Virden 10              45 30%             \n# ℹ 38 more rows\n# ℹ 19 more variables: post_test_score <dbl>, post_test_percent <chr>,\n#   percentage_change <chr>, unit_1_score <dbl>, unit_1_percent <chr>,\n#   unit_2_score <dbl>, unit_2_percent <chr>, unit_3_score <dbl>,\n#   unit_3_percent <chr>, unit_4_score <dbl>, unit_4_percent <chr>,\n#   unit_5_6_score <dbl>, unit_5_6_percent <chr>, unit_7_score <dbl>,\n#   unit_7_percent <chr>, unit_8_score <dbl>, unit_8_percent <chr>, …\n```\n\n\n:::\n:::\n\n\n## Use `select` to order columns\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ncollege_grad_students %>%\n\tselect(major_code, grad_total, grad_sample_size, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 173 × 22\n   major_code grad_total grad_sample_size major     major_category grad_employed\n        <int>      <int>            <int> <chr>     <chr>                  <int>\n 1       5601       9173              200 Construc… Industrial Ar…          7098\n 2       6004      53864              882 Commerci… Arts                   40492\n 3       6211      24417              437 Hospital… Business               18368\n 4       2201       5411               72 Cosmetol… Industrial Ar…          3590\n 5       2001       9109              171 Communic… Computers & M…          7512\n 6       3201       1542               22 Court Re… Law & Public …          1008\n 7       6206     190996             3738 Marketin… Business              151570\n 8       1101      17488              386 Agricult… Agriculture &…         13104\n 9       2101       5611               98 Computer… Computers & M…          4716\n10       1904      33928              688 Advertis… Communication…         28517\n# ℹ 163 more rows\n# ℹ 16 more variables: grad_employed_fulltime_yearround <int>,\n#   grad_unemployed <int>, grad_unemployment_rate <dbl>, grad_p25th <dbl>,\n#   grad_median <dbl>, grad_p75th <int>, nongrad_total <int>,\n#   nongrad_employed <int>, nongrad_employed_fulltime_yearround <int>,\n#   nongrad_unemployed <int>, nongrad_unemployment_rate <dbl>,\n#   nongrad_p25th <dbl>, nongrad_median <dbl>, nongrad_p75th <dbl>, …\n```\n\n\n:::\n:::\n\n\n. . .\n\n`everything()` is a helper verb that includes **all** column names\n\n## `starts_with()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads %>% \n    select(starts_with(\"test\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 3\n   test_year              test_type test_site\n   <chr>                  <chr>     <chr>    \n 1 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 2 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 3 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 4 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 5 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 6 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 7 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 8 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n 9 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n10 06/01/2016 12:00:00 AM YEAR END  VIRDEN   \n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `ends_with()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads %>% \n    select(ends_with(\"score\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 10\n   pre_test_score post_test_score unit_1_score unit_2_score unit_3_score\n            <dbl>           <dbl>        <dbl>        <dbl>        <dbl>\n 1             43              92            3            4            6\n 2             46             104            5            5            6\n 3             39              75            4            4            6\n 4             35             115            4            4            6\n 5             46              85            2            5            6\n 6             35              91            5            5            7\n 7             40              96            5            5            6\n 8             39              74            4            5            5\n 9             40              90            6            4            5\n10             45              86            4            5            5\n# ℹ 38 more rows\n# ℹ 5 more variables: unit_4_score <dbl>, unit_5_6_score <dbl>,\n#   unit_7_score <dbl>, unit_8_score <dbl>, total_score <dbl>\n```\n\n\n:::\n:::\n\n\n## `contains()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads %>% \n    select(contains(\"test\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 7\n   test_year test_type test_site pre_test_score pre_test_percent post_test_score\n   <chr>     <chr>     <chr>              <dbl> <chr>                      <dbl>\n 1 06/01/20… YEAR END  VIRDEN                43 29%                           92\n 2 06/01/20… YEAR END  VIRDEN                46 31%                          104\n 3 06/01/20… YEAR END  VIRDEN                39 26%                           75\n 4 06/01/20… YEAR END  VIRDEN                35 23%                          115\n 5 06/01/20… YEAR END  VIRDEN                46 31%                           85\n 6 06/01/20… YEAR END  VIRDEN                35 23%                           91\n 7 06/01/20… YEAR END  VIRDEN                40 27%                           96\n 8 06/01/20… YEAR END  VIRDEN                39 26%                           74\n 9 06/01/20… YEAR END  VIRDEN                40 27%                           90\n10 06/01/20… YEAR END  VIRDEN                45 30%                           86\n# ℹ 38 more rows\n# ℹ 1 more variable: post_test_percent <chr>\n```\n\n\n:::\n:::\n\n\n## `all_of()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvars <- c(\"pre_test_score\", \"pre_test_percent\", \"post_test_score\", \"post_test_percent\")\n\nreads %>% \n    select(all_of(vars))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 4\n   pre_test_score pre_test_percent post_test_score post_test_percent\n            <dbl> <chr>                      <dbl> <chr>            \n 1             43 29%                           92 61%              \n 2             46 31%                          104 69%              \n 3             39 26%                           75 50%              \n 4             35 23%                          115 77%              \n 5             46 31%                           85 57%              \n 6             35 23%                           91 61%              \n 7             40 27%                           96 64%              \n 8             39 26%                           74 49%              \n 9             40 27%                           90 60%              \n10             45 30%                           86 57%              \n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `all_of()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nvars <- c(\"pre_test_score\", \"pre_test_percent\", \"post_test_score\", \"post_test_percent\")\n\nmpg %>% \n    select(all_of(vars))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `select()`:\nℹ In argument: `all_of(vars)`.\nCaused by error in `all_of()`:\n! Can't subset elements that don't exist.\n✖ Elements `pre_test_score`, `pre_test_percent`, `post_test_score`, and `post_test_percent` don't exist.\n```\n\n\n:::\n:::\n\n\n## `any_of()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nvars <- c(\"pre_test_score\", \"pre_test_percent\", \"post_test_score\", \"post_test_percent\")\n\nreads %>% \n    select(any_of(vars))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 4\n   pre_test_score pre_test_percent post_test_score post_test_percent\n            <dbl> <chr>                      <dbl> <chr>            \n 1             43 29%                           92 61%              \n 2             46 31%                          104 69%              \n 3             39 26%                           75 50%              \n 4             35 23%                          115 77%              \n 5             46 31%                           85 57%              \n 6             35 23%                           91 61%              \n 7             40 27%                           96 64%              \n 8             39 26%                           74 49%              \n 9             40 27%                           90 60%              \n10             45 30%                           86 57%              \n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `any_of()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nvars <- c(\"pre_test_score\", \"pre_test_percent\", \"post_test_score\", \"post_test_percent\")\n\nmpg %>% \n    select(any_of(vars))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 0\n```\n\n\n:::\n:::\n\n\n## Mix `select` methods and helpers\n\nYou can mix types and helper functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads %>% \n    select(student_id, 1, starts_with(\"total\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 4\n   student_id test_year              total_score total_percent_correct\n   <chr>      <chr>                        <dbl> <chr>                \n 1 Virden 1   06/01/2016 12:00:00 AM         207 41%                  \n 2 Virden 2   06/01/2016 12:00:00 AM         224 45%                  \n 3 Virden 3   06/01/2016 12:00:00 AM         193 39%                  \n 4 Virden 4   06/01/2016 12:00:00 AM         223 45%                  \n 5 Virden 5   06/01/2016 12:00:00 AM         198 40%                  \n 6 Virden 6   06/01/2016 12:00:00 AM         210 42%                  \n 7 Virden 7   06/01/2016 12:00:00 AM         211 42%                  \n 8 Virden 8   06/01/2016 12:00:00 AM         180 36%                  \n 9 Virden 9   06/01/2016 12:00:00 AM         206 41%                  \n10 Virden 10  06/01/2016 12:00:00 AM         206 41%                  \n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## Mix `select` methods and helpers\n\nYou can also use select to rearrange your columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads %>% \n    select(student_id, 1, starts_with(\"total\"), everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 25\n   student_id test_year    total_score total_percent_correct test_type test_site\n   <chr>      <chr>              <dbl> <chr>                 <chr>     <chr>    \n 1 Virden 1   06/01/2016 …         207 41%                   YEAR END  VIRDEN   \n 2 Virden 2   06/01/2016 …         224 45%                   YEAR END  VIRDEN   \n 3 Virden 3   06/01/2016 …         193 39%                   YEAR END  VIRDEN   \n 4 Virden 4   06/01/2016 …         223 45%                   YEAR END  VIRDEN   \n 5 Virden 5   06/01/2016 …         198 40%                   YEAR END  VIRDEN   \n 6 Virden 6   06/01/2016 …         210 42%                   YEAR END  VIRDEN   \n 7 Virden 7   06/01/2016 …         211 42%                   YEAR END  VIRDEN   \n 8 Virden 8   06/01/2016 …         180 36%                   YEAR END  VIRDEN   \n 9 Virden 9   06/01/2016 …         206 41%                   YEAR END  VIRDEN   \n10 Virden 10  06/01/2016 …         206 41%                   YEAR END  VIRDEN   \n# ℹ 38 more rows\n# ℹ 19 more variables: pre_test_score <dbl>, pre_test_percent <chr>,\n#   post_test_score <dbl>, post_test_percent <chr>, percentage_change <chr>,\n#   unit_1_score <dbl>, unit_1_percent <chr>, unit_2_score <dbl>,\n#   unit_2_percent <chr>, unit_3_score <dbl>, unit_3_percent <chr>,\n#   unit_4_score <dbl>, unit_4_percent <chr>, unit_5_6_score <dbl>,\n#   unit_5_6_percent <chr>, unit_7_score <dbl>, unit_7_percent <chr>, …\n```\n\n\n:::\n:::\n\n\n## `relocate()`\n\n[relocate(]{style=\"color:#D55E00\"}[.data]{style=\"color:#56B4E9\"}, ... [.before = NULL]{style=\"color:#009E73\"}, [.after = NULL]{style=\"color:#E69f00\"}[)]{style=\"color:#D55E00\"}\n\n. . .\n\n[.data]{style=\"color:#56B4E9\"} = dataframe/tibble\n\n... = columns to move\n\n[.before]{style=\"color:#009E73\"} = variable to move *before*\n\n[.after]{style=\"color:#E69f00\"} = variable to move *after*\n\n- supplying neither [.before]{style=\"color:#009E73\"} nor [.after]{style=\"color:#E69f00\"} move columns to the left-hand side\n- specifying both is an error\n\n## `relocate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  relocate(party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   party      name       start      end       \n   <chr>      <chr>      <date>     <date>    \n 1 Republican Eisenhower 1953-01-20 1961-01-20\n 2 Democratic Kennedy    1961-01-20 1963-11-22\n 3 Democratic Johnson    1963-11-22 1969-01-20\n 4 Republican Nixon      1969-01-20 1974-08-09\n 5 Republican Ford       1974-08-09 1977-01-20\n 6 Democratic Carter     1977-01-20 1981-01-20\n 7 Republican Reagan     1981-01-20 1989-01-20\n 8 Republican Bush       1989-01-20 1993-01-20\n 9 Democratic Clinton    1993-01-20 2001-01-20\n10 Republican Bush       2001-01-20 2009-01-20\n11 Democratic Obama      2009-01-20 2017-01-20\n12 Republican Trump      2017-01-20 2021-01-20\n```\n\n\n:::\n:::\n\n\n::: aside\nmoves \"party\" to far left (default)\n:::\n\n## `relocate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  relocate(party, .after = start)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   name       start      party      end       \n   <chr>      <date>     <chr>      <date>    \n 1 Eisenhower 1953-01-20 Republican 1961-01-20\n 2 Kennedy    1961-01-20 Democratic 1963-11-22\n 3 Johnson    1963-11-22 Democratic 1969-01-20\n 4 Nixon      1969-01-20 Republican 1974-08-09\n 5 Ford       1974-08-09 Republican 1977-01-20\n 6 Carter     1977-01-20 Democratic 1981-01-20\n 7 Reagan     1981-01-20 Republican 1989-01-20\n 8 Bush       1989-01-20 Republican 1993-01-20\n 9 Clinton    1993-01-20 Democratic 2001-01-20\n10 Bush       2001-01-20 Republican 2009-01-20\n11 Obama      2009-01-20 Democratic 2017-01-20\n12 Trump      2017-01-20 Republican 2021-01-20\n```\n\n\n:::\n:::\n\n\n::: aside \nmoves \"party\" after \"start\"\n:::\n\n## `relocate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  relocate(end, .before = party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   name       start      end        party     \n   <chr>      <date>     <date>     <chr>     \n 1 Eisenhower 1953-01-20 1961-01-20 Republican\n 2 Kennedy    1961-01-20 1963-11-22 Democratic\n 3 Johnson    1963-11-22 1969-01-20 Democratic\n 4 Nixon      1969-01-20 1974-08-09 Republican\n 5 Ford       1974-08-09 1977-01-20 Republican\n 6 Carter     1977-01-20 1981-01-20 Democratic\n 7 Reagan     1981-01-20 1989-01-20 Republican\n 8 Bush       1989-01-20 1993-01-20 Republican\n 9 Clinton    1993-01-20 2001-01-20 Democratic\n10 Bush       2001-01-20 2009-01-20 Republican\n11 Obama      2009-01-20 2017-01-20 Democratic\n12 Trump      2017-01-20 2021-01-20 Republican\n```\n\n\n:::\n:::\n\n\n::: aside\nmoves \"end\" before \"party\"\n:::\n\n# `filter()`\n\n## `filter()`\n\n[**choose rows**]{style=\"color:#56B4E9\"} that satisfy your condition (`== TRUE`)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(df,\n       type == \"otter\",\n       site == \"bay\")\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/dplyr_filter.jpg){fig-align='center'}\n:::\n:::\n\n:::\n\n::::\n\n::: aside\nIllustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations/)\n:::\n\n## `filter()` {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nComplete set of boolean operations\n\n- *x* is the left-hand circle\n- *y* is the right-hand circle\n- the shaded region show which parts each operator selects\n    + *xor* == *x* or *y* except where they overlap\n\n**==**\n: equal\n\n**!**\n: negates\n\n**!=**\n: NOT equal\n\n**&**\n: and\n\n**|**\n: or\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://d33wubrfki0l68.cloudfront.net/01f4b6d39d2be8269740a3ad7946faa79f7243cf/8369a/diagrams/transform-logical.png)\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n## `filter()` numeric\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  filter(cyl == 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 81 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 6 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n 7 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n 8 audi         a4 quattro   2    2008     4 auto… 4        19    27 p     comp…\n 9 chevrolet    malibu       2.4  1999     4 auto… f        19    27 r     mids…\n10 chevrolet    malibu       2.4  2008     4 auto… f        22    30 r     mids…\n# ℹ 71 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  filter(hwy >= 22)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 143 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 133 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## `filter` for Democrats\n\nnote the use of `==` NOT `=`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tfilter(party == \"Democratic\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  name    start      end        party     \n  <chr>   <date>     <date>     <chr>     \n1 Kennedy 1961-01-20 1963-11-22 Democratic\n2 Johnson 1963-11-22 1969-01-20 Democratic\n3 Carter  1977-01-20 1981-01-20 Democratic\n4 Clinton 1993-01-20 2001-01-20 Democratic\n5 Obama   2009-01-20 2017-01-20 Democratic\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>%\n\tfilter(party = \"Democratic\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\n! We detected a named input.\nℹ This usually means that you've used `=` instead of `==`.\nℹ Did you mean `party == \"Democratic\"`?\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## `filter` character\n\nnote the use of `==` NOT `=`\n\n\n::: {.cell}\n\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg_ %>% \n  filter(manufacturer == \"pontiac\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  manufacturer model      displ  year   cyl\n  <chr>        <chr>      <dbl> <int> <int>\n1 pontiac      grand prix   3.1  1999     6\n2 pontiac      grand prix   3.8  1999     6\n3 pontiac      grand prix   3.8  1999     6\n4 pontiac      grand prix   3.8  2008     6\n5 pontiac      grand prix   5.3  2008     8\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  filter(party == \"Democratic\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  name    start      end        party     \n  <chr>   <date>     <date>     <chr>     \n1 Kennedy 1961-01-20 1963-11-22 Democratic\n2 Johnson 1963-11-22 1969-01-20 Democratic\n3 Carter  1977-01-20 1981-01-20 Democratic\n4 Clinton 1993-01-20 2001-01-20 Democratic\n5 Obama   2009-01-20 2017-01-20 Democratic\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## Democrats starting after 2000\n\n`,` is equivalent to `&`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  filter(party == \"Democratic\" & \n  start > \"2000-01-01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  name  start      end        party     \n  <chr> <date>     <date>     <chr>     \n1 Obama 2009-01-20 2017-01-20 Democratic\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  filter(party == \"Democratic\", \n  start > \"2000-01-01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  name  start      end        party     \n  <chr> <date>     <date>     <chr>     \n1 Obama 2009-01-20 2017-01-20 Democratic\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## `filter()` note {.smaller}\n\n* The order of operations doesn’t work like English\n* Can’t write: \n    + `filter(presidential, name == \"Kennedy\" | \"Johnson\")`\n* Must be:\n    + `filter(presidential, name == \"Kennedy\" | name == \"Johnson\")`\n\n## more `filter()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 25\n   test_year      test_type test_site student_id pre_test_score pre_test_percent\n   <chr>          <chr>     <chr>     <chr>               <dbl> <chr>           \n 1 06/01/2016 12… YEAR END  VIRDEN    Virden 1               43 29%             \n 2 06/01/2016 12… YEAR END  VIRDEN    Virden 2               46 31%             \n 3 06/01/2016 12… YEAR END  VIRDEN    Virden 3               39 26%             \n 4 06/01/2016 12… YEAR END  VIRDEN    Virden 4               35 23%             \n 5 06/01/2016 12… YEAR END  VIRDEN    Virden 5               46 31%             \n 6 06/01/2016 12… YEAR END  VIRDEN    Virden 6               35 23%             \n 7 06/01/2016 12… YEAR END  VIRDEN    Virden 7               40 27%             \n 8 06/01/2016 12… YEAR END  VIRDEN    Virden 8               39 26%             \n 9 06/01/2016 12… YEAR END  VIRDEN    Virden 9               40 27%             \n10 06/01/2016 12… YEAR END  VIRDEN    Virden 10              45 30%             \n# ℹ 38 more rows\n# ℹ 19 more variables: post_test_score <dbl>, post_test_percent <chr>,\n#   percentage_change <chr>, unit_1_score <dbl>, unit_1_percent <chr>,\n#   unit_2_score <dbl>, unit_2_percent <chr>, unit_3_score <dbl>,\n#   unit_3_percent <chr>, unit_4_score <dbl>, unit_4_percent <chr>,\n#   unit_5_6_score <dbl>, unit_5_6_percent <chr>, unit_7_score <dbl>,\n#   unit_7_percent <chr>, unit_8_score <dbl>, unit_8_percent <chr>, …\n```\n\n\n:::\n:::\n\n\n## more `filter()`\n\nAnomaly in the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreads %>%\n count(student_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 46 × 2\n   student_id                 n\n   <chr>                  <int>\n 1 All Students (Average)     3\n 2 Jones 1                    1\n 3 Jones 10                   1\n 4 Jones 11                   1\n 5 Jones 12                   1\n 6 Jones 13                   1\n 7 Jones 14                   1\n 8 Jones 15                   1\n 9 Jones 2                    1\n10 Jones 3                    1\n# ℹ 36 more rows\n```\n\n\n:::\n:::\n\n\n## Let's remove these aggregate rows\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|4|5\"}\nstudents_only <- reads %>%\n  filter(student_id != \"All Students (Average)\") \n\nstudents_only %>% \n  count(student_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 45 × 2\n   student_id     n\n   <chr>      <int>\n 1 Jones 1        1\n 2 Jones 10       1\n 3 Jones 11       1\n 4 Jones 12       1\n 5 Jones 13       1\n 6 Jones 14       1\n 7 Jones 15       1\n 8 Jones 2        1\n 9 Jones 3        1\n10 Jones 4        1\n# ℹ 35 more rows\n```\n\n\n:::\n:::\n\n\n## Not equal \n\n`!` means **NOT**\n\n`!=` means **NOT equal**\n\nNote:\n\n- If you want values that are NOT `NA`:\n    + `!is.na(variable)`\n    + ~~`variable != NA`~~\n\n## Chaining `{dplyr}` functions\n\nWhat if we wanted to `select` and `filter` a data set?\n\nSelect \"*name*\" and \"*party*\" of presidents who began their term after 2000\n\n. . .\n\n(1) Two step method 😐\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|3\"}\nafter_2000 <- filter(presidential, start > as.Date(\"2000-01-01\"))\n\nselect(after_2000, name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  party     \n  <chr> <chr>     \n1 Bush  Republican\n2 Obama Democratic\n3 Trump Republican\n```\n\n\n:::\n:::\n\n\n## Chaining `{dplyr}` functions\n\n(2) Alternatively, we could wrap `select` around `filter` ☹️\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(filter(presidential, start > as.Date(\"2000-01-01\")), name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  party     \n  <chr> <chr>     \n1 Bush  Republican\n2 Obama Democratic\n3 Trump Republican\n```\n\n\n:::\n:::\n\n\n## Chaining `{dplyr}` functions\n\n(3) Piping functions 🎉\n\nWe could use the pipe function to help increase the readability of our code: \n<br>\n`%>%`\n<br>\n\nCalled the \"pipe\" operator and \"piping functions\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(presidential, start > as.Date(\"2000-01-01\")) %>% \n  select(name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  party     \n  <chr> <chr>     \n1 Bush  Republican\n2 Obama Democratic\n3 Trump Republican\n```\n\n\n:::\n:::\n\n\n## Piping functions {.smaller}\n\nEven better:\n\n* Generally when using the pipe, the first argument is the data set, which gets piped through the corresponding functions\n* So the code on the prior slide would be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential %>% \n  filter(start > as.Date(\"2000-01-01\")) %>% \n  select(name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  party     \n  <chr> <chr>     \n1 Bush  Republican\n2 Obama Democratic\n3 Trump Republican\n```\n\n\n:::\n:::\n\n\n::: aside\nNote the lovely indentations and line breaks to help keep things straight\n:::\n\n# `mutate()`\n\n## Some new data\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n(prepost <- reads %>% \n  select(student_id, test_site, pre_test_score, post_test_score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 4\n   student_id test_site pre_test_score post_test_score\n   <chr>      <chr>              <dbl>           <dbl>\n 1 Virden 1   VIRDEN                43              92\n 2 Virden 2   VIRDEN                46             104\n 3 Virden 3   VIRDEN                39              75\n 4 Virden 4   VIRDEN                35             115\n 5 Virden 5   VIRDEN                46              85\n 6 Virden 6   VIRDEN                35              91\n 7 Virden 7   VIRDEN                40              96\n 8 Virden 8   VIRDEN                39              74\n 9 Virden 9   VIRDEN                40              90\n10 Virden 10  VIRDEN                45              86\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `mutate()`\n\n**Add** a variable\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nprepost %>% \n  mutate(gain = post_test_score - pre_test_score)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 5\n   student_id test_site pre_test_score post_test_score  gain\n   <chr>      <chr>              <dbl>           <dbl> <dbl>\n 1 Virden 1   VIRDEN                43              92    49\n 2 Virden 2   VIRDEN                46             104    58\n 3 Virden 3   VIRDEN                39              75    36\n 4 Virden 4   VIRDEN                35             115    80\n 5 Virden 5   VIRDEN                46              85    39\n 6 Virden 6   VIRDEN                35              91    56\n 7 Virden 7   VIRDEN                40              96    56\n 8 Virden 8   VIRDEN                39              74    35\n 9 Virden 9   VIRDEN                40              90    50\n10 Virden 10  VIRDEN                45              86    41\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(prepost)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"student_id\"      \"test_site\"       \"pre_test_score\"  \"post_test_score\"\n```\n\n\n:::\n:::\n\n\n. . .\n\nWhy do we not see the new *gain* column?\n\n## `mutate()`\n\n**Add** *multiple* variables\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nprepost <- prepost %>%\n  mutate(\n    gain = post_test_score - pre_test_score,\n\t  sum_tests = post_test_score + pre_test_score\n  )\n\nprepost\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   student_id test_site pre_test_score post_test_score  gain sum_tests\n   <chr>      <chr>              <dbl>           <dbl> <dbl>     <dbl>\n 1 Virden 1   VIRDEN                43              92    49       135\n 2 Virden 2   VIRDEN                46             104    58       150\n 3 Virden 3   VIRDEN                39              75    36       114\n 4 Virden 4   VIRDEN                35             115    80       150\n 5 Virden 5   VIRDEN                46              85    39       131\n 6 Virden 6   VIRDEN                35              91    56       126\n 7 Virden 7   VIRDEN                40              96    56       136\n 8 Virden 8   VIRDEN                39              74    35       113\n 9 Virden 9   VIRDEN                40              90    50       130\n10 Virden 10  VIRDEN                45              86    41       131\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `mutate()`\n\n**Change** a variable\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nprepost <- prepost %>% \n  mutate(sum_tests = (sum_tests/180) * 100)\n\nprepost\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   student_id test_site pre_test_score post_test_score  gain sum_tests\n   <chr>      <chr>              <dbl>           <dbl> <dbl>     <dbl>\n 1 Virden 1   VIRDEN                43              92    49      75  \n 2 Virden 2   VIRDEN                46             104    58      83.3\n 3 Virden 3   VIRDEN                39              75    36      63.3\n 4 Virden 4   VIRDEN                35             115    80      83.3\n 5 Virden 5   VIRDEN                46              85    39      72.8\n 6 Virden 6   VIRDEN                35              91    56      70  \n 7 Virden 7   VIRDEN                40              96    56      75.6\n 8 Virden 8   VIRDEN                39              74    35      62.8\n 9 Virden 9   VIRDEN                40              90    50      72.2\n10 Virden 10  VIRDEN                45              86    41      72.8\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n# `arrange()`\n\n## `arrange()`\n\nOrder the data\n\n- Order by *gain*, ascending [default]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepost %>% \n  arrange(gain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   student_id  test_site pre_test_score post_test_score  gain sum_tests\n   <chr>       <chr>              <dbl>           <dbl> <dbl>     <dbl>\n 1 Jones 12    JONES                 27              32     5      32.8\n 2 Westside 6  WESTSIDE              57              82    25      77.2\n 3 Virden 8    VIRDEN                39              74    35      62.8\n 4 Virden 3    VIRDEN                39              75    36      63.3\n 5 Virden 5    VIRDEN                46              85    39      72.8\n 6 Virden 10   VIRDEN                45              86    41      72.8\n 7 Jones 3     JONES                 54              95    41      82.8\n 8 Virden 1    VIRDEN                43              92    49      75  \n 9 Jones 13    JONES                 49              98    49      81.7\n10 Westside 13 WESTSIDE              45              94    49      77.2\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `arrange()`\n\nOrder the data\n\n- Order by *pre_test_score* and *gain*, ascending\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepost %>% \n  arrange(pre_test_score, gain)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   student_id test_site pre_test_score post_test_score  gain sum_tests\n   <chr>      <chr>              <dbl>           <dbl> <dbl>     <dbl>\n 1 Jones 11   JONES                 24             108    84      73.3\n 2 Jones 4    JONES                 25              99    74      68.9\n 3 Jones 12   JONES                 27              32     5      32.8\n 4 Virden 12  VIRDEN                31             102    71      73.9\n 5 Virden 11  VIRDEN                32              91    59      68.3\n 6 Virden 13  VIRDEN                33              86    53      66.1\n 7 Virden 6   VIRDEN                35              91    56      70  \n 8 Virden 15  VIRDEN                35             101    66      75.6\n 9 Jones 9    JONES                 35             109    74      80  \n10 Virden 4   VIRDEN                35             115    80      83.3\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `arrange()`\n\nOrder the data\n\n- Order by *gain*, `desc`ending\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepost %>% \n  arrange(desc(gain))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   student_id test_site pre_test_score post_test_score  gain sum_tests\n   <chr>      <chr>              <dbl>           <dbl> <dbl>     <dbl>\n 1 Jones 11   JONES                 24             108    84      73.3\n 2 Virden 4   VIRDEN                35             115    80      83.3\n 3 Jones 4    JONES                 25              99    74      68.9\n 4 Jones 5    JONES                 36             110    74      81.1\n 5 Jones 9    JONES                 35             109    74      80  \n 6 Virden 12  VIRDEN                31             102    71      73.9\n 7 Jones 1    JONES                 36             103    67      77.2\n 8 Virden 15  VIRDEN                35             101    66      75.6\n 9 Jones 6    JONES                 40             106    66      81.1\n10 Westside 8 WESTSIDE              43             109    66      84.4\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `summarize()` {.smaller}\n\n`summarize()` or `summarise()`\n\n* Here: compute the `mean` and `standard deviation` of the gain scores\n* What are we looking at?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepost %>% \n  summarize(mean_gain = mean(gain, na.rm = TRUE),\n            sd_gain = sd(gain, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_gain sd_gain\n      <dbl>   <dbl>\n1      56.3    13.6\n```\n\n\n:::\n:::\n\n\n. . .\n\n::: aside\nThis is a good start for a descriptive table!\n:::\n\n# `group_by()`\n\n## \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig2.png)\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\" .fragment}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig3.png)\n:::\n:::\n\n:::\n\n::::\n\n::: aside\nImage from [Software Carpentry](https://swcarpentry.github.io/r-novice-gapminder/13-dplyr/)\n:::\n\n## `group_by()`\n\n<b>Conduct an operation for each level of a grouping factor</b>\n\nHere, compute the mean gain for each *test site*\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3\"}\nprepost %>% \n  group_by(test_site) %>% \n  summarize(mean_gain = mean(gain))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  test_site    mean_gain\n  <chr>            <dbl>\n1 JONES             59  \n2 JONES ALL         59  \n3 VIRDEN            53.8\n4 VIRDEN ALL        53  \n5 WESTSIDE          56.3\n6 WESTSIDE ALL      56  \n```\n\n\n:::\n:::\n\n\n## `group_by()` {.smaller}\n\nWhen you use `group_by()` and `summarize()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nYou will get a row for each unique group\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  group_by(cyl) %>% \n  summarize(max_hwy = max(hwy))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n    cyl max_hwy\n  <int>   <int>\n1     4      44\n2     5      29\n3     6      29\n4     8      26\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\" .fragment}\n\nIf you have multiple grouping variables, you will get a row for each unique combination of groups\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  group_by(cyl, drv) %>% \n  summarize(max_hwy = max(hwy))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n# Groups:   cyl [4]\n    cyl drv   max_hwy\n  <int> <chr>   <int>\n1     4 4          28\n2     4 f          44\n3     5 f          29\n4     6 4          25\n5     6 f          29\n6     6 r          26\n7     8 4          23\n8     8 f          25\n9     8 r          26\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## Add summarized column to full data\n\nUse `mutate()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepost %>% \n  group_by(test_site) %>% \n  mutate(mean_gain = mean(gain))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 7\n# Groups:   test_site [6]\n   student_id test_site pre_test_score post_test_score  gain sum_tests mean_gain\n   <chr>      <chr>              <dbl>           <dbl> <dbl>     <dbl>     <dbl>\n 1 Virden 1   VIRDEN                43              92    49      75        53.8\n 2 Virden 2   VIRDEN                46             104    58      83.3      53.8\n 3 Virden 3   VIRDEN                39              75    36      63.3      53.8\n 4 Virden 4   VIRDEN                35             115    80      83.3      53.8\n 5 Virden 5   VIRDEN                46              85    39      72.8      53.8\n 6 Virden 6   VIRDEN                35              91    56      70        53.8\n 7 Virden 7   VIRDEN                40              96    56      75.6      53.8\n 8 Virden 8   VIRDEN                39              74    35      62.8      53.8\n 9 Virden 9   VIRDEN                40              90    50      72.2      53.8\n10 Virden 10  VIRDEN                45              86    41      72.8      53.8\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## Retain only summarized columns\n\nUse `summarize()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepost %>% \n  group_by(test_site) %>% \n  summarize(mean_gain = mean(gain))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  test_site    mean_gain\n  <chr>            <dbl>\n1 JONES             59  \n2 JONES ALL         59  \n3 VIRDEN            53.8\n4 VIRDEN ALL        53  \n5 WESTSIDE          56.3\n6 WESTSIDE ALL      56  \n```\n\n\n:::\n:::\n\n\n## Pipe to `{ggplot}`!\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|1,2,3|4|5|6\"}\nprepost %>% \n  group_by(test_site) %>% \n  summarize(mean_gain = mean(gain)) %>% \n  ggplot(aes(test_site, mean_gain)) + \n  geom_col(fill = \"cornflowerblue\", alpha = .7) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](w4_dplyr_files/figure-revealjs/unnamed-chunk-62-1.png){width=864}\n:::\n:::\n\n\n## \n\n![](./images/kd.gif)\n\n## Summarizing and Plotting\n\n- Calculate mean *post_test_score* by test site\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3\"}\nstudents_only %>%\n    group_by(test_site) %>%\n    summarize(mean = mean(post_test_score))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  test_site  mean\n  <chr>     <dbl>\n1 JONES      97.8\n2 VIRDEN     92.5\n3 WESTSIDE  103. \n```\n\n\n:::\n:::\n\n\n## Plot it\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|3|4|5|6|7\"}\ntheme_set(theme_minimal(base_size = 18))\n\nstudents_only %>%\n  group_by(test_site) %>%\n  summarize(mean = mean(post_test_score)) %>%\n  ggplot(aes(test_site, mean)) +\n  geom_col(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](w4_dplyr_files/figure-revealjs/unnamed-chunk-64-1.png){width=864}\n:::\n:::\n\n\n# A couple more\n\n`recode()` and `rename()`\n\n## Recode with `ifelse()`\n\nRecoding into dichotomous variable with `ifelse()`\n\n`ifelse(`test, yes, no`)`\n\n*or*\n\n`ifelse(`logical statement, do this `if` TRUE, `else` do this`)`\n\n## Recode with `ifelse()`\n\nRecoding into dichotomous variable with `ifelse()`\n\n**Remember to pair with `mutate()`!**\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nstudents_only %>% \n  mutate(New_test_site = ifelse(test_site == \"JONES\", \"district 1\", \"district 2\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 45 × 26\n   test_year      test_type test_site student_id pre_test_score pre_test_percent\n   <chr>          <chr>     <chr>     <chr>               <dbl> <chr>           \n 1 06/01/2016 12… YEAR END  VIRDEN    Virden 1               43 29%             \n 2 06/01/2016 12… YEAR END  VIRDEN    Virden 2               46 31%             \n 3 06/01/2016 12… YEAR END  VIRDEN    Virden 3               39 26%             \n 4 06/01/2016 12… YEAR END  VIRDEN    Virden 4               35 23%             \n 5 06/01/2016 12… YEAR END  VIRDEN    Virden 5               46 31%             \n 6 06/01/2016 12… YEAR END  VIRDEN    Virden 6               35 23%             \n 7 06/01/2016 12… YEAR END  VIRDEN    Virden 7               40 27%             \n 8 06/01/2016 12… YEAR END  VIRDEN    Virden 8               39 26%             \n 9 06/01/2016 12… YEAR END  VIRDEN    Virden 9               40 27%             \n10 06/01/2016 12… YEAR END  VIRDEN    Virden 10              45 30%             \n# ℹ 35 more rows\n# ℹ 20 more variables: post_test_score <dbl>, post_test_percent <chr>,\n#   percentage_change <chr>, unit_1_score <dbl>, unit_1_percent <chr>,\n#   unit_2_score <dbl>, unit_2_percent <chr>, unit_3_score <dbl>,\n#   unit_3_percent <chr>, unit_4_score <dbl>, unit_4_percent <chr>,\n#   unit_5_6_score <dbl>, unit_5_6_percent <chr>, unit_7_score <dbl>,\n#   unit_7_percent <chr>, unit_8_score <dbl>, unit_8_percent <chr>, …\n```\n\n\n:::\n:::\n\n\n## Recode with `recode()`\n\nRecoding into multinomial variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecode(variable,\n       old_category_1 = \"new_category_1\",\n\t     old_category_2 = \"new_category_2\",\n\t     old_category_3 = \"new_category_3\",\n       ...\n)\n```\n:::\n\n\n## Recode with `recode()`\n\nRecoding into multinomial variable\n\n**Remember to pair with `mutate()`**\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nstudents_only %>% \n  mutate(test_site = recode(test_site,\n                            JONES = \"Jones Middle\",\n                            VIRDEN = \"Virden Elementary\",\n                            WESTSIDE = \"Westside High\")\n         )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 45 × 25\n   test_year      test_type test_site student_id pre_test_score pre_test_percent\n   <chr>          <chr>     <chr>     <chr>               <dbl> <chr>           \n 1 06/01/2016 12… YEAR END  Virden E… Virden 1               43 29%             \n 2 06/01/2016 12… YEAR END  Virden E… Virden 2               46 31%             \n 3 06/01/2016 12… YEAR END  Virden E… Virden 3               39 26%             \n 4 06/01/2016 12… YEAR END  Virden E… Virden 4               35 23%             \n 5 06/01/2016 12… YEAR END  Virden E… Virden 5               46 31%             \n 6 06/01/2016 12… YEAR END  Virden E… Virden 6               35 23%             \n 7 06/01/2016 12… YEAR END  Virden E… Virden 7               40 27%             \n 8 06/01/2016 12… YEAR END  Virden E… Virden 8               39 26%             \n 9 06/01/2016 12… YEAR END  Virden E… Virden 9               40 27%             \n10 06/01/2016 12… YEAR END  Virden E… Virden 10              45 30%             \n# ℹ 35 more rows\n# ℹ 19 more variables: post_test_score <dbl>, post_test_percent <chr>,\n#   percentage_change <chr>, unit_1_score <dbl>, unit_1_percent <chr>,\n#   unit_2_score <dbl>, unit_2_percent <chr>, unit_3_score <dbl>,\n#   unit_3_percent <chr>, unit_4_score <dbl>, unit_4_percent <chr>,\n#   unit_5_6_score <dbl>, unit_5_6_percent <chr>, unit_7_score <dbl>,\n#   unit_7_percent <chr>, unit_8_score <dbl>, unit_8_percent <chr>, …\n```\n\n\n:::\n:::\n\n\n## Recode with `recode()`\n\nRemember to use backticks for special characters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  mutate(cyl_str = recode(cyl,\n                      `4` = \"cylinders4\",\n                      `6` = \"cylinders6\",\n                      `8` = \"cylinders8\"))\n```\n:::\n\n\n## Recode with `case_when()` {.smaller}\n\nRecoding across several variables, or if you find yourself using nested `ifelse()` statements\n\n**Remember to pair with `mutate()`**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6|7|8|9\"}\nlibrary(palmerpenguins)\n\npenguins %>% \n  mutate(species_big = \n           case_when(\n             body_mass_g > 4500 & species == \"Adelie\" ~ \"adelie_big\",\n             body_mass_g > 4600 & species == \"Chinstrap\" ~ \"chinstrap_big\",\n             body_mass_g > 6000 & species == \"Gentoo\" ~ \"gentoo_big\",\n             .default = \"other\"\n           ))\n```\n:::\n\n\n. . .\n\n`.default` equivalent to `all else`\n\n## `rename()` {.smaller}\n\n`rename(new_name = old_name)`\n\n**NOT paired with `mutate()`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  rename(\n    home = island,\n    bill_length = bill_length_mm\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species home    bill_length bill_depth_mm flipper_length_mm body_mass_g sex  \n   <fct>   <fct>         <dbl>         <dbl>             <int>       <int> <fct>\n 1 Adelie  Torger…        39.1          18.7               181        3750 male \n 2 Adelie  Torger…        39.5          17.4               186        3800 fema…\n 3 Adelie  Torger…        40.3          18                 195        3250 fema…\n 4 Adelie  Torger…        NA            NA                  NA          NA <NA> \n 5 Adelie  Torger…        36.7          19.3               193        3450 fema…\n 6 Adelie  Torger…        39.3          20.6               190        3650 male \n 7 Adelie  Torger…        38.9          17.8               181        3625 fema…\n 8 Adelie  Torger…        39.2          19.6               195        4675 male \n 9 Adelie  Torger…        34.1          18.1               193        3475 <NA> \n10 Adelie  Torger…        42            20.2               190        4250 <NA> \n# ℹ 334 more rows\n# ℹ 1 more variable: year <int>\n```\n\n\n:::\n:::\n\n\n## rename with `select()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  select(species, home = island, bill_length = bill_length_mm, year) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   species home      bill_length  year\n   <fct>   <fct>           <dbl> <int>\n 1 Adelie  Torgersen        39.1  2007\n 2 Adelie  Torgersen        39.5  2007\n 3 Adelie  Torgersen        40.3  2007\n 4 Adelie  Torgersen        NA    2007\n 5 Adelie  Torgersen        36.7  2007\n 6 Adelie  Torgersen        39.3  2007\n 7 Adelie  Torgersen        38.9  2007\n 8 Adelie  Torgersen        39.2  2007\n 9 Adelie  Torgersen        34.1  2007\n10 Adelie  Torgersen        42    2007\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Final notes on `{dplyr}`\n\n* We could spend weeks on this\n* We'll be using it all term long\n* Verbs can help you gain fluency\n* There are also conditional and all-inclusive versions of `mutate`, `select`, and `summarize`\n    + [`across()`](https://dplyr.tidyverse.org/reference/across.html)\n\n\n# Next time\n\n## Before next class {.smaller}\n\n- Final Project\n    + [Final Project: Outline]{style=\"color:#FF0000\"}\n- Reading\n    + [Bryan (2017)](https://peerj.com/preprints/3159v2/)\n- Activities\n    + Download [GitKraken](https://www.gitkraken.com/)\n    + Watch [What is a Git repository?](https://www.youtube.com/watch?v=A-4WltCTVms&list=PLe6EXFvnTV7-_41SpakZoTIYCgX4aMTdU&index=3)\n    + Watch [What is a remote repository?](https://www.youtube.com/watch?v=Lb4yvfrX_7I&list=PLe6EXFvnTV7-_41SpakZoTIYCgX4aMTdU&index=3)\n- Homework\n    + Homework 4\n\n\n\n",
    "supporting": [
      "w4_dplyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}